{"ast":null,"code":"'use strict';\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar firebase = _interopDefault(require('@firebase/app'));\n\nvar tslib = require('tslib');\n\nvar component = require('@firebase/component');\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Standard error codes for different ways a request can fail, as defined by:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * This map is used primarily to convert from a backend error code string to\r\n * a client SDK error code string, and make sure it's in the supported set.\r\n */\n\n\nvar errorCodeMap = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n/**\r\n * An explicit error that can be thrown from a handler to send an error to the\r\n * client that called the function.\r\n */\n\nvar HttpsErrorImpl =\n/** @class */\nfunction (_super) {\n  tslib.__extends(HttpsErrorImpl, _super);\n\n  function HttpsErrorImpl(code, message, details) {\n    var _this = _super.call(this, message) || this; // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n\n\n    Object.setPrototypeOf(_this, HttpsErrorImpl.prototype);\n    _this.code = code;\n    _this.details = details;\n    return _this;\n  }\n\n  return HttpsErrorImpl;\n}(Error);\n/**\r\n * Takes an HTTP status code and returns the corresponding ErrorCode.\r\n * This is the standard HTTP status code -> error mapping defined in:\r\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\r\n *\r\n * @param status An HTTP status code.\r\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\r\n */\n\n\nfunction codeForHTTPStatus(status) {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n\n    case 400:\n      return 'invalid-argument';\n\n    case 401:\n      return 'unauthenticated';\n\n    case 403:\n      return 'permission-denied';\n\n    case 404:\n      return 'not-found';\n\n    case 409:\n      return 'aborted';\n\n    case 429:\n      return 'resource-exhausted';\n\n    case 499:\n      return 'cancelled';\n\n    case 500:\n      return 'internal';\n\n    case 501:\n      return 'unimplemented';\n\n    case 503:\n      return 'unavailable';\n\n    case 504:\n      return 'deadline-exceeded';\n  }\n\n  return 'unknown';\n}\n/**\r\n * Takes an HTTP response and returns the corresponding Error, if any.\r\n */\n\n\nfunction _errorForResponse(status, bodyJSON, serializer) {\n  var code = codeForHTTPStatus(status); // Start with reasonable defaults from the status code.\n\n  var description = code;\n  var details = undefined; // Then look through the body for explicit details.\n\n  try {\n    var errorJSON = bodyJSON && bodyJSON.error;\n\n    if (errorJSON) {\n      var status_1 = errorJSON.status;\n\n      if (typeof status_1 === 'string') {\n        if (!errorCodeMap[status_1]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n\n        code = errorCodeMap[status_1]; // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n\n        description = status_1;\n      }\n\n      var message = errorJSON.message;\n\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {// If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n/**\r\n * Helper class to get metadata that should be included with a function call.\r\n */\n\n\nvar ContextProvider =\n/** @class */\nfunction () {\n  function ContextProvider(authProvider, messagingProvider) {\n    var _this = this;\n\n    this.auth = null;\n    this.messaging = null;\n    this.auth = authProvider.getImmediate({\n      optional: true\n    });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(function (auth) {\n        return _this.auth = auth;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(function (messaging) {\n        return _this.messaging = messaging;\n      }, function () {\n        /* get() never rejects */\n      });\n    }\n  }\n\n  ContextProvider.prototype.getAuthToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var token, e_1;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            if (!this.auth) {\n              return [2\n              /*return*/\n              , undefined];\n            }\n\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , this.auth.getToken()];\n\n          case 2:\n            token = _a.sent();\n\n            if (!token) {\n              return [2\n              /*return*/\n              , undefined];\n            }\n\n            return [2\n            /*return*/\n            , token.accessToken];\n\n          case 3:\n            e_1 = _a.sent(); // If there's any error when trying to get the auth token, leave it off.\n\n            return [2\n            /*return*/\n            , undefined];\n\n          case 4:\n            return [2\n            /*return*/\n            ];\n        }\n      });\n    });\n  };\n\n  ContextProvider.prototype.getInstanceIdToken = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      return tslib.__generator(this, function (_a) {\n        if (!this.messaging || !('Notification' in self) || Notification.permission !== 'granted') {\n          return [2\n          /*return*/\n          , undefined];\n        }\n\n        try {\n          return [2\n          /*return*/\n          , this.messaging.getToken()];\n        } catch (e) {\n          // We don't warn on this, because it usually means messaging isn't set up.\n          // console.warn('Failed to retrieve instance id token.', e);\n          // If there's any error when trying to get the token, leave it off.\n          return [2\n          /*return*/\n          , undefined];\n        }\n\n        return [2\n        /*return*/\n        ];\n      });\n    });\n  };\n\n  ContextProvider.prototype.getContext = function () {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var authToken, instanceIdToken;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4\n            /*yield*/\n            , this.getAuthToken()];\n\n          case 1:\n            authToken = _a.sent();\n            return [4\n            /*yield*/\n            , this.getInstanceIdToken()];\n\n          case 2:\n            instanceIdToken = _a.sent();\n            return [2\n            /*return*/\n            , {\n              authToken: authToken,\n              instanceIdToken: instanceIdToken\n            }];\n        }\n      });\n    });\n  };\n\n  return ContextProvider;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nvar UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues( // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\no, f) {\n  var result = {};\n\n  for (var key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n\n  return result;\n}\n\nvar Serializer =\n/** @class */\nfunction () {\n  function Serializer() {} // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n\n\n  Serializer.prototype.encode = function (data) {\n    var _this = this;\n\n    if (data == null) {\n      return null;\n    }\n\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n\n    if (data === true || data === false) {\n      return data;\n    }\n\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n\n    if (Array.isArray(data)) {\n      return data.map(function (x) {\n        return _this.encode(x);\n      });\n    }\n\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data, function (x) {\n        return _this.encode(x);\n      });\n    } // If we got this far, the data is not encodable.\n\n\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }; // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n\n\n  Serializer.prototype.decode = function (json) {\n    var _this = this;\n\n    if (json == null) {\n      return json;\n    }\n\n    if (json['@type']) {\n      switch (json['@type']) {\n        case LONG_TYPE: // Fall through and handle this the same as unsigned.\n\n        case UNSIGNED_LONG_TYPE:\n          {\n            // Technically, this could work return a valid number for malformed\n            // data if there was a number followed by garbage. But it's just not\n            // worth all the extra code to detect that case.\n            var value = Number(json['value']);\n\n            if (isNaN(value)) {\n              throw new Error('Data cannot be decoded from JSON: ' + json);\n            }\n\n            return value;\n          }\n\n        default:\n          {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n      }\n    }\n\n    if (Array.isArray(json)) {\n      return json.map(function (x) {\n        return _this.decode(x);\n      });\n    }\n\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json, function (x) {\n        return _this.decode(x);\n      });\n    } // Anything else is safe to return.\n\n\n    return json;\n  };\n\n  return Serializer;\n}();\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Returns a Promise that will be rejected after the given duration.\r\n * The error will be of type HttpsErrorImpl.\r\n *\r\n * @param millis Number of milliseconds to wait before rejecting.\r\n */\n\n\nfunction failAfter(millis) {\n  var timer;\n  var promise = new Promise(function (_, reject) {\n    timer = setTimeout(function () {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n  return {\n    timer: timer,\n    promise: promise\n  };\n}\n/**\r\n * The main class for the Firebase Functions SDK.\r\n */\n\n\nvar Service =\n/** @class */\nfunction () {\n  /**\r\n   * Creates a new Functions service for the given app and (optional) region.\r\n   * @param app_ The FirebaseApp to use.\r\n   * @param region_ The region to call functions in.\r\n   */\n  function Service(app_, authProvider, messagingProvider, region_) {\n    var _this = this;\n\n    if (region_ === void 0) {\n      region_ = 'us-central1';\n    }\n\n    this.app_ = app_;\n    this.region_ = region_;\n    this.serializer = new Serializer();\n    this.emulatorOrigin = null;\n    this.INTERNAL = {\n      delete: function () {\n        return _this.deleteService();\n      }\n    };\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider); // Cancels all ongoing requests when resolved.\n\n    this.cancelAllRequests = new Promise(function (resolve) {\n      _this.deleteService = function () {\n        return resolve();\n      };\n    });\n  }\n\n  Object.defineProperty(Service.prototype, \"app\", {\n    get: function () {\n      return this.app_;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  /**\r\n   * Returns the URL for a callable with the given name.\r\n   * @param name The name of the callable.\r\n   */\n\n  Service.prototype._url = function (name) {\n    var projectId = this.app_.options.projectId;\n    var region = this.region_;\n\n    if (this.emulatorOrigin !== null) {\n      var origin_1 = this.emulatorOrigin;\n      return origin_1 + \"/\" + projectId + \"/\" + region + \"/\" + name;\n    }\n\n    return \"https://\" + region + \"-\" + projectId + \".cloudfunctions.net/\" + name;\n  };\n  /**\r\n   * Changes this instance to point to a Cloud Functions emulator running\r\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\r\n   *\r\n   * @param origin The origin of the local emulator, such as\r\n   * \"http://localhost:5005\".\r\n   */\n\n\n  Service.prototype.useFunctionsEmulator = function (origin) {\n    this.emulatorOrigin = origin;\n  };\n  /**\r\n   * Returns a reference to the callable https trigger with the given name.\r\n   * @param name The name of the trigger.\r\n   */\n\n\n  Service.prototype.httpsCallable = function (name, options) {\n    var _this = this;\n\n    return function (data) {\n      return _this.call(name, data, options || {});\n    };\n  };\n  /**\r\n   * Does an HTTP POST and returns the completed response.\r\n   * @param url The url to post to.\r\n   * @param body The JSON body of the post.\r\n   * @param headers The HTTP headers to include in the request.\r\n   * @return A Promise that will succeed when the request finishes.\r\n   */\n\n\n  Service.prototype.postJSON = function (url, body, headers) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var response, e_1, json, e_2;\n      return tslib.__generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            headers.append('Content-Type', 'application/json');\n            _a.label = 1;\n\n          case 1:\n            _a.trys.push([1, 3,, 4]);\n\n            return [4\n            /*yield*/\n            , fetch(url, {\n              method: 'POST',\n              body: JSON.stringify(body),\n              headers: headers\n            })];\n\n          case 2:\n            response = _a.sent();\n            return [3\n            /*break*/\n            , 4];\n\n          case 3:\n            e_1 = _a.sent(); // This could be an unhandled error on the backend, or it could be a\n            // network error. There's no way to know, since an unhandled error on the\n            // backend will fail to set the proper CORS header, and thus will be\n            // treated as a network error by fetch.\n\n            return [2\n            /*return*/\n            , {\n              status: 0,\n              json: null\n            }];\n\n          case 4:\n            json = null;\n            _a.label = 5;\n\n          case 5:\n            _a.trys.push([5, 7,, 8]);\n\n            return [4\n            /*yield*/\n            , response.json()];\n\n          case 6:\n            json = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 7:\n            e_2 = _a.sent();\n            return [3\n            /*break*/\n            , 8];\n\n          case 8:\n            return [2\n            /*return*/\n            , {\n              status: response.status,\n              json: json\n            }];\n        }\n      });\n    });\n  };\n  /**\r\n   * Calls a callable function asynchronously and returns the result.\r\n   * @param name The name of the callable trigger.\r\n   * @param data The data to pass as params to the function.s\r\n   */\n\n\n  Service.prototype.call = function (name, data, options) {\n    return tslib.__awaiter(this, void 0, void 0, function () {\n      var url, body, headers, context, timeout, _a, timer, failAfterPromise, response, error, responseData, decodedData;\n\n      return tslib.__generator(this, function (_b) {\n        switch (_b.label) {\n          case 0:\n            url = this._url(name); // Encode any special types, such as dates, in the input data.\n\n            data = this.serializer.encode(data);\n            body = {\n              data: data\n            };\n            headers = new Headers();\n            return [4\n            /*yield*/\n            , this.contextProvider.getContext()];\n\n          case 1:\n            context = _b.sent();\n\n            if (context.authToken) {\n              headers.append('Authorization', 'Bearer ' + context.authToken);\n            }\n\n            if (context.instanceIdToken) {\n              headers.append('Firebase-Instance-ID-Token', context.instanceIdToken);\n            }\n\n            timeout = options.timeout || 70000;\n            _a = failAfter(timeout), timer = _a.timer, failAfterPromise = _a.promise;\n            return [4\n            /*yield*/\n            , Promise.race([clearTimeoutWrapper(timer, this.postJSON(url, body, headers)), failAfterPromise, clearTimeoutWrapper(timer, this.cancelAllRequests)])];\n\n          case 2:\n            response = _b.sent(); // If service was deleted, interrupted response throws an error.\n\n            if (!response) {\n              throw new HttpsErrorImpl('cancelled', 'Firebase Functions instance was deleted.');\n            }\n\n            error = _errorForResponse(response.status, response.json, this.serializer);\n\n            if (error) {\n              throw error;\n            }\n\n            if (!response.json) {\n              throw new HttpsErrorImpl('internal', 'Response is not valid JSON object.');\n            }\n\n            responseData = response.json.data; // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n            // backwards compatibility.\n\n            if (typeof responseData === 'undefined') {\n              responseData = response.json.result;\n            }\n\n            if (typeof responseData === 'undefined') {\n              // Consider the response malformed.\n              throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n            }\n\n            decodedData = this.serializer.decode(responseData);\n            return [2\n            /*return*/\n            , {\n              data: decodedData\n            }];\n        }\n      });\n    });\n  };\n\n  return Service;\n}();\n\nfunction clearTimeoutWrapper(timer, promise) {\n  return tslib.__awaiter(this, void 0, void 0, function () {\n    var result;\n    return tslib.__generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , promise];\n\n        case 1:\n          result = _a.sent(); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          clearTimeout(timer);\n          return [2\n          /*return*/\n          , result];\n      }\n    });\n  });\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Type constant for Firebase Functions.\r\n */\n\n\nvar FUNCTIONS_TYPE = 'functions';\n\nfunction factory(container, region) {\n  // Dependencies\n  var app = container.getProvider('app').getImmediate();\n  var authProvider = container.getProvider('auth-internal');\n  var messagingProvider = container.getProvider('messaging'); // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n  return new Service(app, authProvider, messagingProvider, region);\n}\n\nfunction registerFunctions(instance) {\n  var namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n  instance.INTERNAL.registerComponent(new component.Component(FUNCTIONS_TYPE, factory, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps(namespaceExports).setMultipleInstances(true));\n}\n\nvar name = \"@firebase/functions\";\nvar version = \"0.4.50\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nregisterFunctions(firebase);\nfirebase.registerVersion(name, version);","map":{"version":3,"sources":["../src/api/error.ts","../src/context.ts","../src/serializer.ts","../src/api/service.ts","../src/config.ts","../index.ts"],"names":["Component"],"mappings":"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","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details as {} | null);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _FirebaseApp } from '@firebase/app-types/private';\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data as object, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json as object, x => this.decode(x as {} | null));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: Function;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region.\n   * @param app_ The FirebaseApp to use.\n   * @param region_ The region to call functions in.\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    private region_: string = 'us-central1'\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return this.deleteService();\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    const region = this.region_;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${region}/${name}`;\n    }\n    return `https://${region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: Headers\n  ): Promise<HttpResponse> {\n    headers.append('Content-Type', 'application/json');\n\n    let response: Response;\n    try {\n      response = await fetch(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: {} | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers = new Headers();\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers.append('Authorization', 'Bearer ' + context.authToken);\n    }\n    if (context.instanceIdToken) {\n      headers.append('Firebase-Instance-ID-Token', context.instanceIdToken);\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData as {} | null);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nfunction factory(container: ComponentContainer, region?: string): Service {\n  // Dependencies\n  const app = container.getProvider('app').getImmediate();\n  const authProvider = container.getProvider('auth-internal');\n  const messagingProvider = container.getProvider('messaging');\n\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  return new Service(app, authProvider, messagingProvider, region);\n}\n\nexport function registerFunctions(instance: _FirebaseNamespace): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport * as types from '@firebase/functions-types';\nimport { registerFunctions } from './src/config';\n\nimport { name, version } from './package.json';\n\nregisterFunctions(firebase as _FirebaseNamespace);\nfirebase.registerVersion(name, version);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    functions?: {\n      (app?: FirebaseApp): types.FirebaseFunctions;\n      Functions: typeof types.FirebaseFunctions;\n    };\n  }\n  interface FirebaseApp {\n    functions?(region?: string): types.FirebaseFunctions;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}