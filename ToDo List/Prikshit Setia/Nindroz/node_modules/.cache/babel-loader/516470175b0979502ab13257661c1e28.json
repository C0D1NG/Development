{"ast":null,"code":"import { __assign, __awaiter, __generator } from 'tslib';\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { Logger } from '@firebase/logger';\nimport { ErrorFactory, isBrowserExtension, areCookiesEnabled, isIndexedDBAvailable, validateIndexedDBOpenable } from '@firebase/util';\nimport { Component } from '@firebase/component';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar ANALYTICS_ID_FIELD = 'measurementId'; // Key to attach FID to in gtag params.\n\nvar GA_FID_KEY = 'firebase_id';\nvar ORIGIN_KEY = 'origin';\nvar GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\nvar GtagCommand;\n\n(function (GtagCommand) {\n  GtagCommand[\"EVENT\"] = \"event\";\n  GtagCommand[\"SET\"] = \"set\";\n  GtagCommand[\"CONFIG\"] = \"config\";\n})(GtagCommand || (GtagCommand = {}));\n/*\r\n * Officially recommended event names for gtag.js\r\n * Any other string is also allowed.\r\n */\n\n\nvar EventName;\n\n(function (EventName) {\n  EventName[\"ADD_SHIPPING_INFO\"] = \"add_shipping_info\";\n  EventName[\"ADD_PAYMENT_INFO\"] = \"add_payment_info\";\n  EventName[\"ADD_TO_CART\"] = \"add_to_cart\";\n  EventName[\"ADD_TO_WISHLIST\"] = \"add_to_wishlist\";\n  EventName[\"BEGIN_CHECKOUT\"] = \"begin_checkout\";\n  /** @deprecated */\n\n  EventName[\"CHECKOUT_PROGRESS\"] = \"checkout_progress\";\n  EventName[\"EXCEPTION\"] = \"exception\";\n  EventName[\"GENERATE_LEAD\"] = \"generate_lead\";\n  EventName[\"LOGIN\"] = \"login\";\n  EventName[\"PAGE_VIEW\"] = \"page_view\";\n  EventName[\"PURCHASE\"] = \"purchase\";\n  EventName[\"REFUND\"] = \"refund\";\n  EventName[\"REMOVE_FROM_CART\"] = \"remove_from_cart\";\n  EventName[\"SCREEN_VIEW\"] = \"screen_view\";\n  EventName[\"SEARCH\"] = \"search\";\n  EventName[\"SELECT_CONTENT\"] = \"select_content\";\n  EventName[\"SELECT_ITEM\"] = \"select_item\";\n  EventName[\"SELECT_PROMOTION\"] = \"select_promotion\";\n  /** @deprecated */\n\n  EventName[\"SET_CHECKOUT_OPTION\"] = \"set_checkout_option\";\n  EventName[\"SHARE\"] = \"share\";\n  EventName[\"SIGN_UP\"] = \"sign_up\";\n  EventName[\"TIMING_COMPLETE\"] = \"timing_complete\";\n  EventName[\"VIEW_CART\"] = \"view_cart\";\n  EventName[\"VIEW_ITEM\"] = \"view_item\";\n  EventName[\"VIEW_ITEM_LIST\"] = \"view_item_list\";\n  EventName[\"VIEW_PROMOTION\"] = \"view_promotion\";\n  EventName[\"VIEW_SEARCH_RESULTS\"] = \"view_search_results\";\n})(EventName || (EventName = {}));\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Logs an analytics event through the Firebase SDK.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\r\n * @param eventParams Analytics event parameters.\r\n */\n\n\nfunction logEvent(gtagFunction, analyticsId, eventName, eventParams, options) {\n  var params = eventParams || {};\n\n  if (!options || !options.global) {\n    params = __assign(__assign({}, eventParams), {\n      'send_to': analyticsId\n    });\n  } // Workaround for http://b/141370449 - third argument cannot be undefined.\n\n\n  gtagFunction(GtagCommand.EVENT, eventName, params || {});\n} // TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\n\n/**\r\n * Set screen_name parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param screenName Screen name string to set.\r\n */\n\n\nfunction setCurrentScreen(gtagFunction, analyticsId, screenName, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'screen_name': screenName\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n/**\r\n * Set user_id parameter for this Google Analytics ID.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param id User ID string to set\r\n */\n\n\nfunction setUserId(gtagFunction, analyticsId, id, options) {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, {\n      'user_id': id\n    });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n/**\r\n * Set all other user properties other than user_id and screen_name.\r\n *\r\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\r\n * @param properties Map of user properties to set\r\n */\n\n\nfunction setUserProperties(gtagFunction, analyticsId, properties, options) {\n  if (options && options.global) {\n    var flatProperties = {};\n\n    for (var _i = 0, _a = Object.keys(properties); _i < _a.length; _i++) {\n      var key = _a[_i]; // use dot notation for merge behavior in gtag.js\n\n      flatProperties[\"user_properties.\" + key] = properties[key];\n    }\n\n    gtagFunction(GtagCommand.SET, flatProperties);\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n/**\r\n * Set whether collection is enabled for this ID.\r\n *\r\n * @param enabled If true, collection is enabled for this ID.\r\n */\n\n\nfunction setAnalyticsCollectionEnabled(analyticsId, enabled) {\n  window[\"ga-disable-\" + analyticsId] = !enabled;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar logger = new Logger('@firebase/analytics');\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Initialize the analytics instance in gtag.js by calling config command with fid.\r\n *\r\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\r\n * part of the `page_view` event that's sent during the initialization\r\n * @param app Firebase app\r\n * @param gtagCore The gtag function that's not wrapped.\r\n */\n\nfunction initializeGAId(app, installations, gtagCore) {\n  return __awaiter(this, void 0, void 0, function () {\n    var fid;\n\n    var _a;\n\n    return __generator(this, function (_b) {\n      switch (_b.label) {\n        case 0:\n          return [4\n          /*yield*/\n          , installations.getId()];\n\n        case 1:\n          fid = _b.sent(); // This command initializes gtag.js and only needs to be called once for the entire web app,\n          // but since it is idempotent, we can call it multiple times.\n          // We keep it together with other initialization logic for better code structure.\n          // eslint-disable-next-line @typescript-eslint/no-explicit-any\n\n          gtagCore('js', new Date()); // It should be the first config command called on this GA-ID\n          // Initialize this GA-ID and set FID on it using the gtag config API.\n\n          gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD], (_a = {}, _a[GA_FID_KEY] = fid, // guard against developers accidentally setting properties with prefix `firebase_`\n          _a[ORIGIN_KEY] = 'firebase', _a.update = true, _a));\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nfunction insertScriptTag(dataLayerName) {\n  var script = document.createElement('script'); // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n\n  script.src = GTAG_URL + \"?l=\" + dataLayerName;\n  script.async = true;\n  document.head.appendChild(script);\n}\n/** Get reference to, or create, global datalayer.\r\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\r\n */\n\n\nfunction getOrCreateDataLayer(dataLayerName) {\n  // Check for existing dataLayer and create if needed.\n  var dataLayer = [];\n\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName];\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n\n  return dataLayer;\n}\n/**\r\n * Wraps a standard gtag function with extra code to wait for completion of\r\n * relevant initialization promises before sending requests.\r\n *\r\n * @param gtagCore Basic gtag function that just appends to dataLayer\r\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\r\n */\n\n\nfunction wrapGtag(gtagCore, initializedIdPromisesMap) {\n  return function (command, idOrNameOrParams, gtagParams) {\n    // If event, check that relevant initialization promises have completed.\n    if (command === GtagCommand.EVENT) {\n      var initializationPromisesToWaitFor = []; // If there's a 'send_to' param, check if any ID specified matches\n      // a FID we have begun a fetch on.\n\n      if (gtagParams && gtagParams['send_to']) {\n        var gaSendToList = gtagParams['send_to']; // Make it an array if is isn't, so it can be dealt with the same way.\n\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        }\n\n        for (var _i = 0, gaSendToList_1 = gaSendToList; _i < gaSendToList_1.length; _i++) {\n          var sendToId = gaSendToList_1[_i];\n          var initializationPromise = initializedIdPromisesMap[sendToId]; // Groups will not be in the map.\n\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // There is an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array\n            // and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      } // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n\n\n      if (initializationPromisesToWaitFor.length === 0) {\n        for (var _a = 0, _b = Object.values(initializedIdPromisesMap); _a < _b.length; _a++) {\n          var idPromise = _b[_a];\n          initializationPromisesToWaitFor.push(idPromise);\n        }\n      } // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n\n\n      Promise.all(initializationPromisesToWaitFor) // Workaround for http://b/141370449 - third argument cannot be undefined.\n      .then(function () {\n        return gtagCore(GtagCommand.EVENT, idOrNameOrParams, gtagParams || {});\n      }).catch(function (e) {\n        return logger.error(e);\n      });\n    } else if (command === GtagCommand.CONFIG) {\n      var initializationPromiseToWait = initializedIdPromisesMap[idOrNameOrParams] || Promise.resolve();\n      initializationPromiseToWait.then(function () {\n        gtagCore(GtagCommand.CONFIG, idOrNameOrParams, gtagParams);\n      }).catch(function (e) {\n        return logger.error(e);\n      });\n    } else {\n      // SET command.\n      // Splitting calls for CONFIG and SET to make it clear which signature\n      // Typescript is checking.\n      gtagCore(GtagCommand.SET, idOrNameOrParams);\n    }\n  };\n}\n/**\r\n * Creates global gtag function or wraps existing one if found.\r\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\r\n * 'event' calls that belong to the GAID associated with this Firebase instance.\r\n *\r\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\r\n * @param dataLayerName Name of global GA datalayer array.\r\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\r\n */\n\n\nfunction wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagFunctionName) {\n  // Create a basic core gtag function\n  var gtagCore = function () {\n    var _args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      _args[_i] = arguments[_i];\n    } // Must push IArguments object, not an array.\n\n\n    window[dataLayerName].push(arguments);\n  }; // Replace it with existing one if found\n\n\n  if (window[gtagFunctionName] && typeof window[gtagFunctionName] === 'function') {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\n  return {\n    gtagCore: gtagCore,\n    wrappedGtag: window[gtagFunctionName]\n  };\n}\n/**\r\n * Returns first script tag in DOM matching our gtag url pattern.\r\n */\n\n\nfunction findGtagScriptOnPage() {\n  var scriptTags = window.document.getElementsByTagName('script');\n\n  for (var _i = 0, _a = Object.values(scriptTags); _i < _a.length; _i++) {\n    var tag = _a[_i];\n\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n\n  return null;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar _a;\n\nvar ERRORS = (_a = {}, _a[\"no-ga-id\"\n/* NO_GA_ID */\n] = \"\\\"\" + ANALYTICS_ID_FIELD + \"\\\" field is empty in \" + 'Firebase config. Firebase Analytics ' + 'requires this field to contain a valid measurement ID.', _a[\"already-exists\"\n/* ALREADY_EXISTS */\n] = 'A Firebase Analytics instance with the measurement ID ${id} ' + ' already exists. ' + 'Only one Firebase Analytics instance can be created for each measurement ID.', _a[\"already-initialized\"\n/* ALREADY_INITIALIZED */\n] = 'Firebase Analytics has already been initialized.' + 'settings() must be called before initializing any Analytics instance' + 'or it will have no effect.', _a[\"interop-component-reg-failed\"\n/* INTEROP_COMPONENT_REG_FAILED */\n] = 'Firebase Analytics Interop Component failed to instantiate', _a[\"indexedDB-unsupported\"\n/* INDEXED_DB_UNSUPPORTED */\n] = 'IndexedDB is not supported by current browswer', _a[\"invalid-indexedDB-context\"\n/* INVALID_INDEXED_DB_CONTEXT */\n] = \"Environment doesn't support IndexedDB: {$errorInfo}. \" + 'Wrap initialization of analytics in analytics.isSupported() ' + 'to prevent initialization in unsupported environments', _a[\"cookies-not-enabled\"\n/* COOKIES_NOT_ENABLED */\n] = 'Cookies are not enabled in this browser environment. Analytics requires cookies to be enabled.', _a[\"invalid-analytics-context\"\n/* INVALID_ANALYTICS_CONTEXT */\n] = 'Firebase Analytics is not supported in browser extensions.', _a);\nvar ERROR_FACTORY = new ErrorFactory('analytics', 'Analytics', ERRORS);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/**\r\n * Maps gaId to FID fetch promises.\r\n */\n\nvar initializedIdPromisesMap = {};\n/**\r\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\r\n */\n\nvar dataLayerName = 'dataLayer';\n/**\r\n * Name for window global gtag function used by GA: defaults to 'gtag'.\r\n */\n\nvar gtagName = 'gtag';\n/**\r\n * Reproduction of standard gtag function or reference to existing\r\n * gtag function on window object.\r\n */\n\nvar gtagCoreFunction;\n/**\r\n * Wrapper around gtag function that ensures FID is sent with all\r\n * relevant event and config calls.\r\n */\n\nvar wrappedGtagFunction;\n/**\r\n * Flag to ensure page initialization steps (creation or wrapping of\r\n * dataLayer and gtag script) are only run once per page load.\r\n */\n\nvar globalInitDone = false;\n/**\r\n * For testing\r\n */\n\nfunction resetGlobalVars(newGlobalInitDone, newGaInitializedPromise) {\n  if (newGlobalInitDone === void 0) {\n    newGlobalInitDone = false;\n  }\n\n  if (newGaInitializedPromise === void 0) {\n    newGaInitializedPromise = {};\n  }\n\n  globalInitDone = newGlobalInitDone;\n  initializedIdPromisesMap = newGaInitializedPromise;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n/**\r\n * For testing\r\n */\n\n\nfunction getGlobalVars() {\n  return {\n    initializedIdPromisesMap: initializedIdPromisesMap\n  };\n}\n/**\r\n * This must be run before calling firebase.analytics() or it won't\r\n * have any effect.\r\n * @param options Custom gtag and dataLayer names.\r\n */\n\n\nfunction settings(options) {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(\"already-initialized\"\n    /* ALREADY_INITIALIZED */\n    );\n  }\n\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\nfunction factory(app, installations) {\n  if (isBrowserExtension()) {\n    throw ERROR_FACTORY.create(\"invalid-analytics-context\"\n    /* INVALID_ANALYTICS_CONTEXT */\n    );\n  }\n\n  if (!areCookiesEnabled()) {\n    throw ERROR_FACTORY.create(\"cookies-not-enabled\"\n    /* COOKIES_NOT_ENABLED */\n    );\n  }\n\n  if (!isIndexedDBAvailable()) {\n    throw ERROR_FACTORY.create(\"indexedDB-unsupported\"\n    /* INDEXED_DB_UNSUPPORTED */\n    );\n  } // Async but non-blocking.\n\n\n  validateIndexedDBOpenable().catch(function (error) {\n    throw ERROR_FACTORY.create(\"invalid-indexedDB-context\"\n    /* INVALID_INDEXED_DB_CONTEXT */\n    , {\n      errorInfo: error\n    });\n  });\n  var analyticsId = app.options[ANALYTICS_ID_FIELD];\n\n  if (!analyticsId) {\n    throw ERROR_FACTORY.create(\"no-ga-id\"\n    /* NO_GA_ID */\n    );\n  }\n\n  if (initializedIdPromisesMap[analyticsId] != null) {\n    throw ERROR_FACTORY.create(\"already-exists\"\n    /* ALREADY_EXISTS */\n    , {\n      id: analyticsId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n\n    getOrCreateDataLayer(dataLayerName);\n\n    var _a = wrapOrCreateGtag(initializedIdPromisesMap, dataLayerName, gtagName),\n        wrappedGtag = _a.wrappedGtag,\n        gtagCore = _a.gtagCore;\n\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n    globalInitDone = true;\n  } // Async but non-blocking.\n\n\n  initializedIdPromisesMap[analyticsId] = initializeGAId(app, installations, gtagCoreFunction);\n  var analyticsInstance = {\n    app: app,\n    logEvent: function (eventName, eventParams, options) {\n      return logEvent(wrappedGtagFunction, analyticsId, eventName, eventParams, options);\n    },\n    setCurrentScreen: function (screenName, options) {\n      return setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options);\n    },\n    setUserId: function (id, options) {\n      return setUserId(wrappedGtagFunction, analyticsId, id, options);\n    },\n    setUserProperties: function (properties, options) {\n      return setUserProperties(wrappedGtagFunction, analyticsId, properties, options);\n    },\n    setAnalyticsCollectionEnabled: function (enabled) {\n      return setAnalyticsCollectionEnabled(analyticsId, enabled);\n    }\n  };\n  return analyticsInstance;\n}\n\nvar name = \"@firebase/analytics\";\nvar version = \"0.4.2\";\n/**\r\n * Type constant for Firebase Analytics.\r\n */\n\nvar ANALYTICS_TYPE = 'analytics';\n\nfunction registerAnalytics(instance) {\n  instance.INTERNAL.registerComponent(new Component(ANALYTICS_TYPE, function (container) {\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate();\n    var installations = container.getProvider('installations').getImmediate();\n    return factory(app, installations);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ).setServiceProps({\n    settings: settings,\n    EventName: EventName,\n    isSupported: isSupported\n  }));\n  instance.INTERNAL.registerComponent(new Component('analytics-internal', internalFactory, \"PRIVATE\"\n  /* PRIVATE */\n  ));\n  instance.registerVersion(name, version);\n\n  function internalFactory(container) {\n    try {\n      var analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(\"interop-component-reg-failed\"\n      /* INTEROP_COMPONENT_REG_FAILED */\n      , {\n        reason: e\n      });\n    }\n  }\n}\n\nregisterAnalytics(firebase);\n/**\r\n * this is a public static method provided to users that wraps four different checks:\r\n *\r\n * 1. check if it's not a browser extension environment.\r\n * 1. check if cookie is enabled in current browser.\r\n * 3. check if IndexedDB is supported by the browser environment.\r\n * 4. check if the current browser context is valid for using IndexedDB.\r\n *\r\n */\n\nfunction isSupported() {\n  return __awaiter(this, void 0, void 0, function () {\n    var isDBOpenable, error_1;\n    return __generator(this, function (_a) {\n      switch (_a.label) {\n        case 0:\n          if (isBrowserExtension()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          if (!areCookiesEnabled()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          if (!isIndexedDBAvailable()) {\n            return [2\n            /*return*/\n            , false];\n          }\n\n          _a.label = 1;\n\n        case 1:\n          _a.trys.push([1, 3,, 4]);\n\n          return [4\n          /*yield*/\n          , validateIndexedDBOpenable()];\n\n        case 2:\n          isDBOpenable = _a.sent();\n          return [2\n          /*return*/\n          , isDBOpenable];\n\n        case 3:\n          error_1 = _a.sent();\n          return [2\n          /*return*/\n          , false];\n\n        case 4:\n          return [2\n          /*return*/\n          ];\n      }\n    });\n  });\n}\n\nexport { factory, getGlobalVars, registerAnalytics, resetGlobalVars, settings };","map":{"version":3,"sources":["../src/constants.ts","../src/functions.ts","../src/logger.ts","../src/helpers.ts","../src/errors.ts","../src/factory.ts","../index.ts"],"names":[],"mappings":";;;;;;AAAA;;;;;;;;;;;;;;;;;AAiBO,IAAM,kBAAkB,GAAG,eAA3B,C,CAEP;;AACO,IAAM,UAAU,GAAG,aAAnB;AACA,IAAM,UAAU,GAAG,QAAnB;AAEA,IAAM,QAAQ,GAAG,0CAAjB;AAEP,IAAY,WAAZ;;AAAA,CAAA,UAAY,WAAZ,EAAuB;AACrB,EAAA,WAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,WAAA,CAAA,KAAA,CAAA,GAAA,KAAA;AACA,EAAA,WAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAY,WAAW,KAAX,WAAW,GAAA,EAAA,CAAvB;AAMA;;;;;;AAIA,IAAY,SAAZ;;AAAA,CAAA,UAAY,SAAZ,EAAqB;AACnB,EAAA,SAAA,CAAA,mBAAA,CAAA,GAAA,mBAAA;AACA,EAAA,SAAA,CAAA,kBAAA,CAAA,GAAA,kBAAA;AACA,EAAA,SAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACA,EAAA,SAAA,CAAA,iBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,SAAA,CAAA,gBAAA,CAAA,GAAA,gBAAA;;;AAEA,EAAA,SAAA,CAAA,mBAAA,CAAA,GAAA,mBAAA;AACA,EAAA,SAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,SAAA,CAAA,eAAA,CAAA,GAAA,eAAA;AACA,EAAA,SAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,SAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,SAAA,CAAA,UAAA,CAAA,GAAA,UAAA;AACA,EAAA,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,SAAA,CAAA,kBAAA,CAAA,GAAA,kBAAA;AACA,EAAA,SAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACA,EAAA,SAAA,CAAA,QAAA,CAAA,GAAA,QAAA;AACA,EAAA,SAAA,CAAA,gBAAA,CAAA,GAAA,gBAAA;AACA,EAAA,SAAA,CAAA,aAAA,CAAA,GAAA,aAAA;AACA,EAAA,SAAA,CAAA,kBAAA,CAAA,GAAA,kBAAA;;;AAEA,EAAA,SAAA,CAAA,qBAAA,CAAA,GAAA,qBAAA;AACA,EAAA,SAAA,CAAA,OAAA,CAAA,GAAA,OAAA;AACA,EAAA,SAAA,CAAA,SAAA,CAAA,GAAA,SAAA;AACA,EAAA,SAAA,CAAA,iBAAA,CAAA,GAAA,iBAAA;AACA,EAAA,SAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,SAAA,CAAA,WAAA,CAAA,GAAA,WAAA;AACA,EAAA,SAAA,CAAA,gBAAA,CAAA,GAAA,gBAAA;AACA,EAAA,SAAA,CAAA,gBAAA,CAAA,GAAA,gBAAA;AACA,EAAA,SAAA,CAAA,qBAAA,CAAA,GAAA,qBAAA;AACD,CA9BD,EAAY,SAAS,KAAT,SAAS,GAAA,EAAA,CAArB;ACnCA;;;;;;;;;;;;;;;;;AAyBA;;;;;;;;;SAOgB,Q,CACd,Y,EACA,W,EACA,S,EACA,W,EACA,O,EAA8B;AAE9B,MAAI,MAAM,GAAgC,WAAW,IAAI,EAAzD;;AACA,MAAI,CAAC,OAAD,IAAY,CAAC,OAAO,CAAC,MAAzB,EAAiC;AAC/B,IAAA,MAAM,GAAA,QAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,WAAR,CAAA,EAAmB;AAAE,iBAAW;AAAb,KAAnB,CAAN;AACD,GAL6B,C;;;AAO9B,EAAA,YAAY,CAAC,WAAW,CAAC,KAAb,EAAoB,SAApB,EAA+B,MAAM,IAAI,EAAzC,CAAZ;AACD,C,CAED;;AAEA;;;;;;;;SAMgB,gB,CACd,Y,EACA,W,EACA,U,EACA,O,EAA8B;AAE9B,MAAI,OAAO,IAAI,OAAO,CAAC,MAAvB,EAA+B;AAC7B,IAAA,YAAY,CAAC,WAAW,CAAC,GAAb,EAAkB;AAAE,qBAAe;AAAjB,KAAlB,CAAZ;AACD,GAFD,MAEO;AACL,IAAA,YAAY,CAAC,WAAW,CAAC,MAAb,EAAqB,WAArB,EAAkC;AAC5C,MAAA,MAAM,EAAE,IADoC;AAE5C,qBAAe;AAF6B,KAAlC,CAAZ;AAID;AACF;AAED;;;;;;;;SAMgB,S,CACd,Y,EACA,W,EACA,E,EACA,O,EAA8B;AAE9B,MAAI,OAAO,IAAI,OAAO,CAAC,MAAvB,EAA+B;AAC7B,IAAA,YAAY,CAAC,WAAW,CAAC,GAAb,EAAkB;AAAE,iBAAW;AAAb,KAAlB,CAAZ;AACD,GAFD,MAEO;AACL,IAAA,YAAY,CAAC,WAAW,CAAC,MAAb,EAAqB,WAArB,EAAkC;AAC5C,MAAA,MAAM,EAAE,IADoC;AAE5C,iBAAW;AAFiC,KAAlC,CAAZ;AAID;AACF;AAED;;;;;;;;SAMgB,iB,CACd,Y,EACA,W,EACA,U,EACA,O,EAA8B;AAE9B,MAAI,OAAO,IAAI,OAAO,CAAC,MAAvB,EAA+B;AAC7B,QAAM,cAAc,GAA+B,EAAnD;;AACA,SAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,UAAZ,CAAlB,EAAkB,EAAA,GAAA,EAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAA2C;AAAtC,UAAM,GAAG,GAAA,EAAA,CAAA,EAAA,CAAT,CAAsC,C;;AAEzC,MAAA,cAAc,CAAC,qBAAmB,GAApB,CAAd,GAA2C,UAAU,CAAC,GAAD,CAArD;AACD;;AACD,IAAA,YAAY,CAAC,WAAW,CAAC,GAAb,EAAkB,cAAlB,CAAZ;AACD,GAPD,MAOO;AACL,IAAA,YAAY,CAAC,WAAW,CAAC,MAAb,EAAqB,WAArB,EAAkC;AAC5C,MAAA,MAAM,EAAE,IADoC;AAE5C,yBAAmB;AAFyB,KAAlC,CAAZ;AAID;AACF;AAED;;;;;;;SAKgB,6B,CACd,W,EACA,O,EAAgB;AAEhB,EAAA,MAAM,CAAC,gBAAc,WAAf,CAAN,GAAsC,CAAC,OAAvC;AACF;AClIA;;;;;;;;;;;;;;;;;;AAmBO,IAAM,MAAM,GAAG,IAAI,MAAJ,CAAW,qBAAX,CAAf;ACnBP;;;;;;;;;;;;;;;;;AAkCA;;;;;;;;;SAQsB,c,CACpB,G,EACA,a,EACA,Q,EAAc;;;;;;;;;AAEF,iBAAA,CAAA;AAAA;AAAA,YAAM,aAAa,CAAC,KAAd,EAAN,CAAA;;;AAAN,UAAA,GAAG,GAAG,EAAA,CAAA,IAAA,EAAN,C;;;;;AAMN,UAAA,QAAQ,CAAC,IAAD,EAAc,IAAI,IAAJ,EAAd,CAAR,C;;;AAIA,UAAA,QAAQ,CAAC,WAAW,CAAC,MAAb,EAAqB,GAAG,CAAC,OAAJ,CAAY,kBAAZ,CAArB,GAAqD,EAAA,GAAA,EAAA,EAC3D,EAAA,CAAC,UAAD,CAAA,GAAc,GAD6C,E;AAG3D,UAAA,EAAA,CAAC,UAAD,CAAA,GAAc,UAH6C,EAI3D,EAAA,CAAA,MAAA,GAAQ,IAJmD,EAK3D,EALM,EAAR;;;;;;;AAMD;;SAEe,e,CAAgB,a,EAAqB;AACnD,MAAM,MAAM,GAAG,QAAQ,CAAC,aAAT,CAAuB,QAAvB,CAAf,CADmD,C;;;AAInD,EAAA,MAAM,CAAC,GAAP,GAAgB,QAAQ,GAAA,KAAR,GAAc,aAA9B;AACA,EAAA,MAAM,CAAC,KAAP,GAAe,IAAf;AACA,EAAA,QAAQ,CAAC,IAAT,CAAc,WAAd,CAA0B,MAA1B;AACD;AAED;;;;;SAGgB,oB,CAAqB,a,EAAqB;;AAExD,MAAI,SAAS,GAAc,EAA3B;;AACA,MAAI,KAAK,CAAC,OAAN,CAAc,MAAM,CAAC,aAAD,CAApB,CAAJ,EAA0C;AACxC,IAAA,SAAS,GAAG,MAAM,CAAC,aAAD,CAAlB;AACD,GAFD,MAEO;AACL,IAAA,MAAM,CAAC,aAAD,CAAN,GAAwB,SAAxB;AACD;;AACD,SAAO,SAAP;AACD;AACD;;;;;;;;;AAOA,SAAS,QAAT,CACE,QADF,EAEE,wBAFF,EAE6D;AAE3D,SAAO,UACL,OADK,EAEL,gBAFK,EAGL,UAHK,EAGkD;;AAGvD,QAAI,OAAO,KAAK,WAAW,CAAC,KAA5B,EAAmC;AACjC,UAAI,+BAA+B,GAAyB,EAA5D,CADiC,C;;;AAIjC,UAAI,UAAU,IAAI,UAAU,CAAC,SAAD,CAA5B,EAAyC;AACvC,YAAI,YAAY,GAAsB,UAAU,CAAC,SAAD,CAAhD,CADuC,C;;AAGvC,YAAI,CAAC,KAAK,CAAC,OAAN,CAAc,YAAd,CAAL,EAAkC;AAChC,UAAA,YAAY,GAAG,CAAC,YAAD,CAAf;AACD;;AACD,aAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,cAAA,GAAA,YAAvB,EAAuB,EAAA,GAAA,cAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAqC;AAAhC,cAAM,QAAQ,GAAA,cAAA,CAAA,EAAA,CAAd;AACH,cAAM,qBAAqB,GAAG,wBAAwB,CAAC,QAAD,CAAtD,CADmC,C;;AAGnC,cAAI,qBAAJ,EAA2B;AACzB,YAAA,+BAA+B,CAAC,IAAhC,CAAqC,qBAArC;AACD,WAFD,MAEO;;;;AAIL,YAAA,+BAA+B,GAAG,EAAlC;AACA;AACD;AACF;AACF,OAvBgC,C;;;;;AA4BjC,UAAI,+BAA+B,CAAC,MAAhC,KAA2C,CAA/C,EAAkD;AAChD,aAAwB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,MAAP,CAAc,wBAAd,CAAxB,EAAwB,EAAA,GAAA,EAAA,CAAA,MAAxB,EAAwB,EAAA,EAAxB,EAAiE;AAA5D,cAAM,SAAS,GAAA,EAAA,CAAA,EAAA,CAAf;AACH,UAAA,+BAA+B,CAAC,IAAhC,CAAqC,SAArC;AACD;AACF,OAhCgC,C;;;;AAmCjC,MAAA,OAAO,CAAC,GAAR,CAAY,+BAAZ,E;AAAA,OAEG,IAFH,CAEQ,YAAA;AACJ,eAAA,QAAQ,CACN,WAAW,CAAC,KADN,EAEN,gBAFM,EAGN,UAAU,IAAI,EAHR,CAAR;AAIC,OAPL,EASG,KATH,CASS,UAAA,CAAA,EAAC;AAAI,eAAA,MAAM,CAAC,KAAP,CAAa,CAAb,CAAA;AAAe,OAT7B;AAUD,KA7CD,MA6CO,IAAI,OAAO,KAAK,WAAW,CAAC,MAA5B,EAAoC;AACzC,UAAM,2BAA2B,GAC/B,wBAAwB,CAAC,gBAAD,CAAxB,IACA,OAAO,CAAC,OAAR,EAFF;AAGA,MAAA,2BAA2B,CACxB,IADH,CACQ,YAAA;AACJ,QAAA,QAAQ,CAAC,WAAW,CAAC,MAAb,EAAqB,gBAArB,EAAiD,UAAjD,CAAR;AACD,OAHH,EAIG,KAJH,CAIS,UAAA,CAAA,EAAC;AAAI,eAAA,MAAM,CAAC,KAAP,CAAa,CAAb,CAAA;AAAe,OAJ7B;AAKD,KATM,MASA;;;;AAIL,MAAA,QAAQ,CAAC,WAAW,CAAC,GAAb,EAAkB,gBAAlB,CAAR;AACD;AACF,GAlED;AAmED;AAED;;;;;;;;;;;SASgB,gB,CACd,wB,EACA,a,EACA,gB,EAAwB;;AAMxB,MAAI,QAAQ,GAAS,YAAA;AAAU,QAAA,KAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAmB;AAAnB,MAAA,KAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;KAAV,C;;;AAElB,IAAA,MAAM,CAAC,aAAD,CAAN,CAAoC,IAApC,CAAyC,SAAzC;AACF,GAHD,CANwB,C;;;AAYxB,MACE,MAAM,CAAC,gBAAD,CAAN,IACA,OAAO,MAAM,CAAC,gBAAD,CAAb,KAAoC,UAFtC,EAGE;;AAEA,IAAA,QAAQ,GAAG,MAAM,CAAC,gBAAD,CAAjB;AACD;;AAED,EAAA,MAAM,CAAC,gBAAD,CAAN,GAA2B,QAAQ,CAAC,QAAD,EAAW,wBAAX,CAAnC;AAEA,SAAO;AACL,IAAA,QAAQ,EAAA,QADH;AAEL,IAAA,WAAW,EAAE,MAAM,CAAC,gBAAD;AAFd,GAAP;AAID;AAED;;;;;SAGgB,oB,GAAoB;AAClC,MAAM,UAAU,GAAG,MAAM,CAAC,QAAP,CAAgB,oBAAhB,CAAqC,QAArC,CAAnB;;AACA,OAAkB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,MAAP,CAAc,UAAd,CAAlB,EAAkB,EAAA,GAAA,EAAA,CAAA,MAAlB,EAAkB,EAAA,EAAlB,EAA6C;AAAxC,QAAM,GAAG,GAAA,EAAA,CAAA,EAAA,CAAT;;AACH,QAAI,GAAG,CAAC,GAAJ,IAAW,GAAG,CAAC,GAAJ,CAAQ,QAAR,CAAiB,QAAjB,CAAf,EAA2C;AACzC,aAAO,GAAP;AACD;AACF;;AACD,SAAO,IAAP;AACF;AC1NA;;;;;;;;;;;;;;;;;;;;AA+BA,IAAM,MAAM,IAAA,EAAA,GAAA,EAAA,EACV,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,OAAI,kBAAJ,GAAsB,uBAAtB,GACA,sCADA,GAEA,wDAJQ,EAKV,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,iEACA,mBADA,GAEA,8EARQ,EASV,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,qDACA,sEADA,GAEA,4BAZQ,EAaV,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,4DAdQ,EAeV,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,gDAhBQ,EAiBV,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,0DACA,8DADA,GAEA,uDApBQ,EAqBV,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,gGAtBQ,EAuBV,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,4DAxBQ,EAyBX,EAzBW,CAAZ;AAiCO,IAAM,aAAa,GAAG,IAAI,YAAJ,CAC3B,WAD2B,EAE3B,WAF2B,EAG3B,MAH2B,CAAtB;AChEP;;;;;;;;;;;;;;;;;AA+CA;;;;AAGA,IAAI,wBAAwB,GAAsC,EAAlE;AAEA;;;;AAGA,IAAI,aAAa,GAAW,WAA5B;AAEA;;;;AAGA,IAAI,QAAQ,GAAW,MAAvB;AAEA;;;;;AAIA,IAAI,gBAAJ;AAEA;;;;;AAIA,IAAI,mBAAJ;AAEA;;;;;AAIA,IAAI,cAAc,GAAY,KAA9B;AAEA;;;;SAGgB,e,CACd,iB,EACA,uB,EAA4B;AAD5B,MAAA,iBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,iBAAA,GAAA,KAAA;AAAyB;;AACzB,MAAA,uBAAA,KAAA,KAAA,CAAA,EAAA;AAAA,IAAA,uBAAA,GAAA,EAAA;AAA4B;;AAE5B,EAAA,cAAc,GAAG,iBAAjB;AACA,EAAA,wBAAwB,GAAG,uBAA3B;AACA,EAAA,aAAa,GAAG,WAAhB;AACA,EAAA,QAAQ,GAAG,MAAX;AACD;AAED;;;;;SAGgB,a,GAAa;AAG3B,SAAO;AACL,IAAA,wBAAwB,EAAA;AADnB,GAAP;AAGD;AAED;;;;;;;SAKgB,Q,CAAS,O,EAAwB;AAC/C,MAAI,cAAJ,EAAoB;AAClB,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD;;AACD,MAAI,OAAO,CAAC,aAAZ,EAA2B;AACzB,IAAA,aAAa,GAAG,OAAO,CAAC,aAAxB;AACD;;AACD,MAAI,OAAO,CAAC,QAAZ,EAAsB;AACpB,IAAA,QAAQ,GAAG,OAAO,CAAC,QAAnB;AACD;AACF;;SAEe,O,CACd,G,EACA,a,EAAoC;AAEpC,MAAI,kBAAkB,EAAtB,EAA0B;AACxB,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD;;AACD,MAAI,CAAC,iBAAiB,EAAtB,EAA0B;AACxB,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD;;AACD,MAAI,CAAC,oBAAoB,EAAzB,EAA6B;AAC3B,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD,GAVmC,C;;;AAYpC,EAAA,yBAAyB,GAAG,KAA5B,CAAkC,UAAA,KAAA,EAAK;AACrC,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,MAAgE;AACpE,MAAA,SAAS,EAAE;AADyD,KAAhE,CAAN;AAGD,GAJD;AAMA,MAAM,WAAW,GAAG,GAAG,CAAC,OAAJ,CAAY,kBAAZ,CAApB;;AACA,MAAI,CAAC,WAAL,EAAkB;AAChB,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD;;AAED,MAAI,wBAAwB,CAAC,WAAD,CAAxB,IAAyC,IAA7C,EAAmD;AACjD,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,MAAoD;AACxD,MAAA,EAAE,EAAE;AADoD,KAApD,CAAN;AAGD;;AAED,MAAI,CAAC,cAAL,EAAqB;;;;AAKnB,QAAI,CAAC,oBAAoB,EAAzB,EAA6B;AAC3B,MAAA,eAAe,CAAC,aAAD,CAAf;AACD;;AACD,IAAA,oBAAoB,CAAC,aAAD,CAApB;;AAEM,QAAA,EAAA,GAA4B,gBAAgB,CAChD,wBADgD,EAEhD,aAFgD,EAGhD,QAHgD,CAA5C;AAAA,QAAE,WAAW,GAAA,EAAA,CAAA,WAAb;AAAA,QAAe,QAAQ,GAAA,EAAA,CAAA,QAAvB;;AAKN,IAAA,mBAAmB,GAAG,WAAtB;AACA,IAAA,gBAAgB,GAAG,QAAnB;AAEA,IAAA,cAAc,GAAG,IAAjB;AACD,GAhDmC,C;;;AAkDpC,EAAA,wBAAwB,CAAC,WAAD,CAAxB,GAAwC,cAAc,CACpD,GADoD,EAEpD,aAFoD,EAGpD,gBAHoD,CAAtD;AAMA,MAAM,iBAAiB,GAAsB;AAC3C,IAAA,GAAG,EAAA,GADwC;AAE3C,IAAA,QAAQ,EAAE,UAAC,SAAD,EAAY,WAAZ,EAAyB,OAAzB,EAAgC;AACxC,aAAA,QAAQ,CACN,mBADM,EAEN,WAFM,EAGN,SAHM,EAIN,WAJM,EAKN,OALM,CAAR;AAMC,KATwC;AAU3C,IAAA,gBAAgB,EAAE,UAAC,UAAD,EAAa,OAAb,EAAoB;AACpC,aAAA,gBAAgB,CAAC,mBAAD,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,OAA/C,CAAhB;AAAuE,KAX9B;AAY3C,IAAA,SAAS,EAAE,UAAC,EAAD,EAAK,OAAL,EAAY;AACrB,aAAA,SAAS,CAAC,mBAAD,EAAsB,WAAtB,EAAmC,EAAnC,EAAuC,OAAvC,CAAT;AAAwD,KAbf;AAc3C,IAAA,iBAAiB,EAAE,UAAC,UAAD,EAAa,OAAb,EAAoB;AACrC,aAAA,iBAAiB,CAAC,mBAAD,EAAsB,WAAtB,EAAmC,UAAnC,EAA+C,OAA/C,CAAjB;AAAwE,KAf/B;AAgB3C,IAAA,6BAA6B,EAAE,UAAA,OAAA,EAAO;AACpC,aAAA,6BAA6B,CAAC,WAAD,EAAc,OAAd,CAA7B;AAAmD;AAjBV,GAA7C;AAoBA,SAAO,iBAAP;AACF;;;;ACxJA;;;;AAGA,IAAM,cAAc,GAAG,WAAvB;;SAEgB,iB,CAAkB,Q,EAA4B;AAC5D,EAAA,QAAQ,CAAC,QAAT,CAAkB,iBAAlB,CACE,IAAI,SAAJ,CACE,cADF,EAEE,UAAA,SAAA,EAAS;;AAEP,QAAM,GAAG,GAAG,SAAS,CAAC,WAAV,CAAsB,KAAtB,EAA6B,YAA7B,EAAZ;AACA,QAAM,aAAa,GAAG,SAAS,CAC5B,WADmB,CACP,eADO,EAEnB,YAFmB,EAAtB;AAGA,WAAO,OAAO,CAAC,GAAD,EAAM,aAAN,CAAd;AACD,GATH,EASG;AAAA;AATH,IAWE,eAXF,CAWkB;AAChB,IAAA,QAAQ,EAAA,QADQ;AAEhB,IAAA,SAAS,EAAA,SAFO;AAGhB,IAAA,WAAW,EAAA;AAHK,GAXlB,CADF;AAmBA,EAAA,QAAQ,CAAC,QAAT,CAAkB,iBAAlB,CACE,IAAI,SAAJ,CAAc,oBAAd,EAAoC,eAApC,EAAmD;AAAA;AAAnD,GADF;AAIA,EAAA,QAAQ,CAAC,eAAT,CAAyB,IAAzB,EAA+B,OAA/B;;AAEA,WAAS,eAAT,CACE,SADF,EAC+B;AAE7B,QAAI;AACF,UAAM,SAAS,GAAG,SAAS,CAAC,WAAV,CAAsB,cAAtB,EAAsC,YAAtC,EAAlB;AACA,aAAO;AACL,QAAA,QAAQ,EAAE,SAAS,CAAC;AADf,OAAP;AAGD,KALD,CAKE,OAAO,CAAP,EAAU;AACV,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,QAAkE;AACtE,QAAA,MAAM,EAAE;AAD8D,OAAlE,CAAN;AAGD;AACF;AACF;;AAID,iBAAiB,CAAC,QAAD,CAAjB;AAcA;;;;;;;;;;AASA,SAAe,WAAf,GAA0B;;;;;;AACxB,cAAI,kBAAkB,EAAtB,EAA0B;AACxB,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAP,CAAA;AACD;;AACD,cAAI,CAAC,iBAAiB,EAAtB,EAA0B;AACxB,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAP,CAAA;AACD;;AACD,cAAI,CAAC,oBAAoB,EAAzB,EAA6B;AAC3B,mBAAA,CAAA;AAAA;AAAA,cAAO,KAAP,CAAA;AACD;;;;;;;AAG+B,iBAAA,CAAA;AAAA;AAAA,YAAM,yBAAyB,EAA/B,CAAA;;;AAAxB,UAAA,YAAY,GAAY,EAAA,CAAA,IAAA,EAAxB;AACN,iBAAA,CAAA;AAAA;AAAA,YAAO,YAAP,CAAA;;;;AAEA,iBAAA,CAAA;AAAA;AAAA,YAAO,KAAP,CAAA","sourcesContent":["/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const ANALYTICS_ID_FIELD = 'measurementId';\n\n// Key to attach FID to in gtag params.\nexport const GA_FID_KEY = 'firebase_id';\nexport const ORIGIN_KEY = 'origin';\n\nexport const GTAG_URL = 'https://www.googletagmanager.com/gtag/js';\n\nexport enum GtagCommand {\n  EVENT = 'event',\n  SET = 'set',\n  CONFIG = 'config'\n}\n\n/*\n * Officially recommended event names for gtag.js\n * Any other string is also allowed.\n */\nexport enum EventName {\n  ADD_SHIPPING_INFO = 'add_shipping_info',\n  ADD_PAYMENT_INFO = 'add_payment_info',\n  ADD_TO_CART = 'add_to_cart',\n  ADD_TO_WISHLIST = 'add_to_wishlist',\n  BEGIN_CHECKOUT = 'begin_checkout',\n  /** @deprecated */\n  CHECKOUT_PROGRESS = 'checkout_progress',\n  EXCEPTION = 'exception',\n  GENERATE_LEAD = 'generate_lead',\n  LOGIN = 'login',\n  PAGE_VIEW = 'page_view',\n  PURCHASE = 'purchase',\n  REFUND = 'refund',\n  REMOVE_FROM_CART = 'remove_from_cart',\n  SCREEN_VIEW = 'screen_view',\n  SEARCH = 'search',\n  SELECT_CONTENT = 'select_content',\n  SELECT_ITEM = 'select_item',\n  SELECT_PROMOTION = 'select_promotion',\n  /** @deprecated */\n  SET_CHECKOUT_OPTION = 'set_checkout_option',\n  SHARE = 'share',\n  SIGN_UP = 'sign_up',\n  TIMING_COMPLETE = 'timing_complete',\n  VIEW_CART = 'view_cart',\n  VIEW_ITEM = 'view_item',\n  VIEW_ITEM_LIST = 'view_item_list',\n  VIEW_PROMOTION = 'view_promotion',\n  VIEW_SEARCH_RESULTS = 'view_search_results'\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  AnalyticsCallOptions,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport { GtagCommand } from './constants';\n/**\n * Logs an analytics event through the Firebase SDK.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param eventName Google Analytics event name, choose from standard list or use a custom string.\n * @param eventParams Analytics event parameters.\n */\nexport function logEvent(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  eventName: string,\n  eventParams?: EventParams,\n  options?: AnalyticsCallOptions\n): void {\n  let params: EventParams | ControlParams = eventParams || {};\n  if (!options || !options.global) {\n    params = { ...eventParams, 'send_to': analyticsId };\n  }\n  // Workaround for http://b/141370449 - third argument cannot be undefined.\n  gtagFunction(GtagCommand.EVENT, eventName, params || {});\n}\n\n// TODO: Brad is going to add `screen_name` to GA Gold config parameter schema\n\n/**\n * Set screen_name parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param screenName Screen name string to set.\n */\nexport function setCurrentScreen(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  screenName: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'screen_name': screenName });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'screen_name': screenName\n    });\n  }\n}\n\n/**\n * Set user_id parameter for this Google Analytics ID.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param id User ID string to set\n */\nexport function setUserId(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  id: string | null,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    gtagFunction(GtagCommand.SET, { 'user_id': id });\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_id': id\n    });\n  }\n}\n\n/**\n * Set all other user properties other than user_id and screen_name.\n *\n * @param gtagFunction Wrapped gtag function that waits for fid to be set before sending an event\n * @param properties Map of user properties to set\n */\nexport function setUserProperties(\n  gtagFunction: Gtag,\n  analyticsId: string,\n  properties: CustomParams,\n  options?: AnalyticsCallOptions\n): void {\n  if (options && options.global) {\n    const flatProperties: { [key: string]: unknown } = {};\n    for (const key of Object.keys(properties)) {\n      // use dot notation for merge behavior in gtag.js\n      flatProperties[`user_properties.${key}`] = properties[key];\n    }\n    gtagFunction(GtagCommand.SET, flatProperties);\n  } else {\n    gtagFunction(GtagCommand.CONFIG, analyticsId, {\n      update: true,\n      'user_properties': properties\n    });\n  }\n}\n\n/**\n * Set whether collection is enabled for this ID.\n *\n * @param enabled If true, collection is enabled for this ID.\n */\nexport function setAnalyticsCollectionEnabled(\n  analyticsId: string,\n  enabled: boolean\n): void {\n  window[`ga-disable-${analyticsId}`] = !enabled;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger } from '@firebase/logger';\n\nexport const logger = new Logger('@firebase/analytics');\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  DataLayer,\n  Gtag,\n  CustomParams,\n  ControlParams,\n  EventParams\n} from '@firebase/analytics-types';\nimport {\n  GtagCommand,\n  ANALYTICS_ID_FIELD,\n  GA_FID_KEY,\n  ORIGIN_KEY,\n  GTAG_URL\n} from './constants';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { logger } from './logger';\n/**\n * Initialize the analytics instance in gtag.js by calling config command with fid.\n *\n * NOTE: We combine analytics initialization and setting fid together because we want fid to be\n * part of the `page_view` event that's sent during the initialization\n * @param app Firebase app\n * @param gtagCore The gtag function that's not wrapped.\n */\nexport async function initializeGAId(\n  app: FirebaseApp,\n  installations: FirebaseInstallations,\n  gtagCore: Gtag\n): Promise<void> {\n  const fid = await installations.getId();\n\n  // This command initializes gtag.js and only needs to be called once for the entire web app,\n  // but since it is idempotent, we can call it multiple times.\n  // We keep it together with other initialization logic for better code structure.\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  gtagCore('js' as any, new Date());\n\n  // It should be the first config command called on this GA-ID\n  // Initialize this GA-ID and set FID on it using the gtag config API.\n  gtagCore(GtagCommand.CONFIG, app.options[ANALYTICS_ID_FIELD]!, {\n    [GA_FID_KEY]: fid,\n    // guard against developers accidentally setting properties with prefix `firebase_`\n    [ORIGIN_KEY]: 'firebase',\n    update: true\n  });\n}\n\nexport function insertScriptTag(dataLayerName: string): void {\n  const script = document.createElement('script');\n  // We are not providing an analyticsId in the URL because it would trigger a `page_view`\n  // without fid. We will initialize ga-id using gtag (config) command together with fid.\n  script.src = `${GTAG_URL}?l=${dataLayerName}`;\n  script.async = true;\n  document.head.appendChild(script);\n}\n\n/** Get reference to, or create, global datalayer.\n * @param dataLayerName Name of datalayer (most often the default, \"_dataLayer\")\n */\nexport function getOrCreateDataLayer(dataLayerName: string): DataLayer {\n  // Check for existing dataLayer and create if needed.\n  let dataLayer: DataLayer = [];\n  if (Array.isArray(window[dataLayerName])) {\n    dataLayer = window[dataLayerName] as DataLayer;\n  } else {\n    window[dataLayerName] = dataLayer;\n  }\n  return dataLayer;\n}\n/**\n * Wraps a standard gtag function with extra code to wait for completion of\n * relevant initialization promises before sending requests.\n *\n * @param gtagCore Basic gtag function that just appends to dataLayer\n * @param initializedIdPromisesMap Map of gaIds to their initialization promises\n */\nfunction wrapGtag(\n  gtagCore: Gtag,\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> }\n): Function {\n  return (\n    command: 'config' | 'set' | 'event',\n    idOrNameOrParams: string | ControlParams,\n    gtagParams?: ControlParams & EventParams & CustomParams\n  ) => {\n    // If event, check that relevant initialization promises have completed.\n    if (command === GtagCommand.EVENT) {\n      let initializationPromisesToWaitFor: Array<Promise<void>> = [];\n      // If there's a 'send_to' param, check if any ID specified matches\n      // a FID we have begun a fetch on.\n      if (gtagParams && gtagParams['send_to']) {\n        let gaSendToList: string | string[] = gtagParams['send_to'];\n        // Make it an array if is isn't, so it can be dealt with the same way.\n        if (!Array.isArray(gaSendToList)) {\n          gaSendToList = [gaSendToList];\n        }\n        for (const sendToId of gaSendToList) {\n          const initializationPromise = initializedIdPromisesMap[sendToId];\n          // Groups will not be in the map.\n          if (initializationPromise) {\n            initializationPromisesToWaitFor.push(initializationPromise);\n          } else {\n            // There is an item in 'send_to' that is not associated\n            // directly with an FID, possibly a group.  Empty this array\n            // and let it get populated below.\n            initializationPromisesToWaitFor = [];\n            break;\n          }\n        }\n      }\n\n      // This will be unpopulated if there was no 'send_to' field , or\n      // if not all entries in the 'send_to' field could be mapped to\n      // a FID. In these cases, wait on all pending initialization promises.\n      if (initializationPromisesToWaitFor.length === 0) {\n        for (const idPromise of Object.values(initializedIdPromisesMap)) {\n          initializationPromisesToWaitFor.push(idPromise);\n        }\n      }\n      // Run core gtag function with args after all relevant initialization\n      // promises have been resolved.\n      Promise.all(initializationPromisesToWaitFor)\n        // Workaround for http://b/141370449 - third argument cannot be undefined.\n        .then(() =>\n          gtagCore(\n            GtagCommand.EVENT,\n            idOrNameOrParams as string,\n            gtagParams || {}\n          )\n        )\n        .catch(e => logger.error(e));\n    } else if (command === GtagCommand.CONFIG) {\n      const initializationPromiseToWait =\n        initializedIdPromisesMap[idOrNameOrParams as string] ||\n        Promise.resolve();\n      initializationPromiseToWait\n        .then(() => {\n          gtagCore(GtagCommand.CONFIG, idOrNameOrParams as string, gtagParams);\n        })\n        .catch(e => logger.error(e));\n    } else {\n      // SET command.\n      // Splitting calls for CONFIG and SET to make it clear which signature\n      // Typescript is checking.\n      gtagCore(GtagCommand.SET, idOrNameOrParams as CustomParams);\n    }\n  };\n}\n\n/**\n * Creates global gtag function or wraps existing one if found.\n * This wrapped function attaches Firebase instance ID (FID) to gtag 'config' and\n * 'event' calls that belong to the GAID associated with this Firebase instance.\n *\n * @param initializedIdPromisesMap Map of gaId to initialization promises.\n * @param dataLayerName Name of global GA datalayer array.\n * @param gtagFunctionName Name of global gtag function (\"gtag\" if not user-specified)\n */\nexport function wrapOrCreateGtag(\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> },\n  dataLayerName: string,\n  gtagFunctionName: string\n): {\n  gtagCore: Gtag;\n  wrappedGtag: Gtag;\n} {\n  // Create a basic core gtag function\n  let gtagCore: Gtag = function (..._args: unknown[]) {\n    // Must push IArguments object, not an array.\n    (window[dataLayerName] as DataLayer).push(arguments);\n  };\n\n  // Replace it with existing one if found\n  if (\n    window[gtagFunctionName] &&\n    typeof window[gtagFunctionName] === 'function'\n  ) {\n    // @ts-ignore\n    gtagCore = window[gtagFunctionName];\n  }\n\n  window[gtagFunctionName] = wrapGtag(gtagCore, initializedIdPromisesMap);\n\n  return {\n    gtagCore,\n    wrappedGtag: window[gtagFunctionName] as Gtag\n  };\n}\n\n/**\n * Returns first script tag in DOM matching our gtag url pattern.\n */\nexport function findGtagScriptOnPage(): HTMLScriptElement | null {\n  const scriptTags = window.document.getElementsByTagName('script');\n  for (const tag of Object.values(scriptTags)) {\n    if (tag.src && tag.src.includes(GTAG_URL)) {\n      return tag;\n    }\n  }\n  return null;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\nimport { ANALYTICS_ID_FIELD } from './constants';\n\nexport const enum AnalyticsError {\n  NO_GA_ID = 'no-ga-id',\n  ALREADY_EXISTS = 'already-exists',\n  ALREADY_INITIALIZED = 'already-initialized',\n  INTEROP_COMPONENT_REG_FAILED = 'interop-component-reg-failed',\n  INDEXED_DB_UNSUPPORTED = 'indexedDB-unsupported',\n  INVALID_INDEXED_DB_CONTEXT = 'invalid-indexedDB-context',\n  COOKIES_NOT_ENABLED = 'cookies-not-enabled',\n  INVALID_ANALYTICS_CONTEXT = 'invalid-analytics-context'\n}\n\nconst ERRORS: ErrorMap<AnalyticsError> = {\n  [AnalyticsError.NO_GA_ID]:\n    `\"${ANALYTICS_ID_FIELD}\" field is empty in ` +\n    'Firebase config. Firebase Analytics ' +\n    'requires this field to contain a valid measurement ID.',\n  [AnalyticsError.ALREADY_EXISTS]:\n    'A Firebase Analytics instance with the measurement ID ${id} ' +\n    ' already exists. ' +\n    'Only one Firebase Analytics instance can be created for each measurement ID.',\n  [AnalyticsError.ALREADY_INITIALIZED]:\n    'Firebase Analytics has already been initialized.' +\n    'settings() must be called before initializing any Analytics instance' +\n    'or it will have no effect.',\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]:\n    'Firebase Analytics Interop Component failed to instantiate',\n  [AnalyticsError.INDEXED_DB_UNSUPPORTED]:\n    'IndexedDB is not supported by current browswer',\n  [AnalyticsError.INVALID_INDEXED_DB_CONTEXT]:\n    \"Environment doesn't support IndexedDB: {$errorInfo}. \" +\n    'Wrap initialization of analytics in analytics.isSupported() ' +\n    'to prevent initialization in unsupported environments',\n  [AnalyticsError.COOKIES_NOT_ENABLED]:\n    'Cookies are not enabled in this browser environment. Analytics requires cookies to be enabled.',\n  [AnalyticsError.INVALID_ANALYTICS_CONTEXT]:\n    'Firebase Analytics is not supported in browser extensions.'\n};\n\ninterface ErrorParams {\n  [AnalyticsError.ALREADY_EXISTS]: { id: string };\n  [AnalyticsError.INTEROP_COMPONENT_REG_FAILED]: { reason: Error };\n  [AnalyticsError.INVALID_INDEXED_DB_CONTEXT]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<AnalyticsError, ErrorParams>(\n  'analytics',\n  'Analytics',\n  ERRORS\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FirebaseAnalytics,\n  Gtag,\n  SettingsOptions\n} from '@firebase/analytics-types';\nimport {\n  logEvent,\n  setCurrentScreen,\n  setUserId,\n  setUserProperties,\n  setAnalyticsCollectionEnabled\n} from './functions';\nimport {\n  initializeGAId,\n  insertScriptTag,\n  getOrCreateDataLayer,\n  wrapOrCreateGtag,\n  findGtagScriptOnPage\n} from './helpers';\nimport { ANALYTICS_ID_FIELD } from './constants';\nimport { AnalyticsError, ERROR_FACTORY } from './errors';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension\n} from '@firebase/util';\n\n/**\n * Maps gaId to FID fetch promises.\n */\nlet initializedIdPromisesMap: { [gaId: string]: Promise<void> } = {};\n\n/**\n * Name for window global data layer array used by GA: defaults to 'dataLayer'.\n */\nlet dataLayerName: string = 'dataLayer';\n\n/**\n * Name for window global gtag function used by GA: defaults to 'gtag'.\n */\nlet gtagName: string = 'gtag';\n\n/**\n * Reproduction of standard gtag function or reference to existing\n * gtag function on window object.\n */\nlet gtagCoreFunction: Gtag;\n\n/**\n * Wrapper around gtag function that ensures FID is sent with all\n * relevant event and config calls.\n */\nlet wrappedGtagFunction: Gtag;\n\n/**\n * Flag to ensure page initialization steps (creation or wrapping of\n * dataLayer and gtag script) are only run once per page load.\n */\nlet globalInitDone: boolean = false;\n\n/**\n * For testing\n */\nexport function resetGlobalVars(\n  newGlobalInitDone = false,\n  newGaInitializedPromise = {}\n): void {\n  globalInitDone = newGlobalInitDone;\n  initializedIdPromisesMap = newGaInitializedPromise;\n  dataLayerName = 'dataLayer';\n  gtagName = 'gtag';\n}\n\n/**\n * For testing\n */\nexport function getGlobalVars(): {\n  initializedIdPromisesMap: { [gaId: string]: Promise<void> };\n} {\n  return {\n    initializedIdPromisesMap\n  };\n}\n\n/**\n * This must be run before calling firebase.analytics() or it won't\n * have any effect.\n * @param options Custom gtag and dataLayer names.\n */\nexport function settings(options: SettingsOptions): void {\n  if (globalInitDone) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_INITIALIZED);\n  }\n  if (options.dataLayerName) {\n    dataLayerName = options.dataLayerName;\n  }\n  if (options.gtagName) {\n    gtagName = options.gtagName;\n  }\n}\n\nexport function factory(\n  app: FirebaseApp,\n  installations: FirebaseInstallations\n): FirebaseAnalytics {\n  if (isBrowserExtension()) {\n    throw ERROR_FACTORY.create(AnalyticsError.INVALID_ANALYTICS_CONTEXT);\n  }\n  if (!areCookiesEnabled()) {\n    throw ERROR_FACTORY.create(AnalyticsError.COOKIES_NOT_ENABLED);\n  }\n  if (!isIndexedDBAvailable()) {\n    throw ERROR_FACTORY.create(AnalyticsError.INDEXED_DB_UNSUPPORTED);\n  }\n  // Async but non-blocking.\n  validateIndexedDBOpenable().catch(error => {\n    throw ERROR_FACTORY.create(AnalyticsError.INVALID_INDEXED_DB_CONTEXT, {\n      errorInfo: error\n    });\n  });\n\n  const analyticsId = app.options[ANALYTICS_ID_FIELD];\n  if (!analyticsId) {\n    throw ERROR_FACTORY.create(AnalyticsError.NO_GA_ID);\n  }\n\n  if (initializedIdPromisesMap[analyticsId] != null) {\n    throw ERROR_FACTORY.create(AnalyticsError.ALREADY_EXISTS, {\n      id: analyticsId\n    });\n  }\n\n  if (!globalInitDone) {\n    // Steps here should only be done once per page: creation or wrapping\n    // of dataLayer and global gtag function.\n\n    // Detect if user has already put the gtag <script> tag on this page.\n    if (!findGtagScriptOnPage()) {\n      insertScriptTag(dataLayerName);\n    }\n    getOrCreateDataLayer(dataLayerName);\n\n    const { wrappedGtag, gtagCore } = wrapOrCreateGtag(\n      initializedIdPromisesMap,\n      dataLayerName,\n      gtagName\n    );\n    wrappedGtagFunction = wrappedGtag;\n    gtagCoreFunction = gtagCore;\n\n    globalInitDone = true;\n  }\n  // Async but non-blocking.\n  initializedIdPromisesMap[analyticsId] = initializeGAId(\n    app,\n    installations,\n    gtagCoreFunction\n  );\n\n  const analyticsInstance: FirebaseAnalytics = {\n    app,\n    logEvent: (eventName, eventParams, options) =>\n      logEvent(\n        wrappedGtagFunction,\n        analyticsId,\n        eventName,\n        eventParams,\n        options\n      ),\n    setCurrentScreen: (screenName, options) =>\n      setCurrentScreen(wrappedGtagFunction, analyticsId, screenName, options),\n    setUserId: (id, options) =>\n      setUserId(wrappedGtagFunction, analyticsId, id, options),\n    setUserProperties: (properties, options) =>\n      setUserProperties(wrappedGtagFunction, analyticsId, properties, options),\n    setAnalyticsCollectionEnabled: enabled =>\n      setAnalyticsCollectionEnabled(analyticsId, enabled)\n  };\n\n  return analyticsInstance;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseAnalytics } from '@firebase/analytics-types';\nimport { FirebaseAnalyticsInternal } from '@firebase/analytics-interop-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport {\n  factory,\n  settings,\n  resetGlobalVars,\n  getGlobalVars\n} from './src/factory';\nimport { EventName } from './src/constants';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { ERROR_FACTORY, AnalyticsError } from './src/errors';\nimport {\n  isIndexedDBAvailable,\n  validateIndexedDBOpenable,\n  areCookiesEnabled,\n  isBrowserExtension\n} from '@firebase/util';\nimport { name, version } from './package.json';\n\ndeclare global {\n  interface Window {\n    [key: string]: unknown;\n  }\n}\n\n/**\n * Type constant for Firebase Analytics.\n */\nconst ANALYTICS_TYPE = 'analytics';\n\nexport function registerAnalytics(instance: _FirebaseNamespace): void {\n  instance.INTERNAL.registerComponent(\n    new Component(\n      ANALYTICS_TYPE,\n      container => {\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n        return factory(app, installations);\n      },\n      ComponentType.PUBLIC\n    ).setServiceProps({\n      settings,\n      EventName,\n      isSupported\n    })\n  );\n\n  instance.INTERNAL.registerComponent(\n    new Component('analytics-internal', internalFactory, ComponentType.PRIVATE)\n  );\n\n  instance.registerVersion(name, version);\n\n  function internalFactory(\n    container: ComponentContainer\n  ): FirebaseAnalyticsInternal {\n    try {\n      const analytics = container.getProvider(ANALYTICS_TYPE).getImmediate();\n      return {\n        logEvent: analytics.logEvent\n      };\n    } catch (e) {\n      throw ERROR_FACTORY.create(AnalyticsError.INTEROP_COMPONENT_REG_FAILED, {\n        reason: e\n      });\n    }\n  }\n}\n\nexport { factory, settings, resetGlobalVars, getGlobalVars };\n\nregisterAnalytics(firebase as _FirebaseNamespace);\n\n/**\n * Define extension behavior of `registerAnalytics`\n */\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    analytics(app?: FirebaseApp): FirebaseAnalytics;\n  }\n  interface FirebaseApp {\n    analytics(): FirebaseAnalytics;\n  }\n}\n\n/**\n * this is a public static method provided to users that wraps four different checks:\n *\n * 1. check if it's not a browser extension environment.\n * 1. check if cookie is enabled in current browser.\n * 3. check if IndexedDB is supported by the browser environment.\n * 4. check if the current browser context is valid for using IndexedDB.\n *\n */\nasync function isSupported(): Promise<boolean> {\n  if (isBrowserExtension()) {\n    return false;\n  }\n  if (!areCookiesEnabled()) {\n    return false;\n  }\n  if (!isIndexedDBAvailable()) {\n    return false;\n  }\n\n  try {\n    const isDBOpenable: boolean = await validateIndexedDBOpenable();\n    return isDBOpenable;\n  } catch (error) {\n    return false;\n  }\n}\n"]},"metadata":{},"sourceType":"module"}