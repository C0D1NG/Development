{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\nvar SplitButton = React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      type = _ref.type,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuRole = _ref.menuRole,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"type\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"renderMenuOnMount\", \"rootCloseEvent\"]);\n\n  return /*#__PURE__*/React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: ButtonGroup\n  }), /*#__PURE__*/React.createElement(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type\n  }, title), /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, toggleLabel)), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;","map":{"version":3,"sources":["/home/hitesh/Documents/repos/facite/node_modules/react-bootstrap/esm/SplitButton.js"],"names":["_extends","_objectWithoutPropertiesLoose","React","PropTypes","Button","ButtonGroup","Dropdown","propTypes","id","any","toggleLabel","string","href","target","onClick","func","title","node","isRequired","type","disabled","bool","menuRole","renderMenuOnMount","rootCloseEvent","bsPrefix","variant","size","defaultProps","SplitButton","forwardRef","_ref","ref","children","props","createElement","as","Toggle","split","toString","undefined","childBsPrefix","className","Menu","role","renderOnMount","displayName"],"mappings":"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","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport React from 'react';\nimport PropTypes from 'prop-types';\nimport Button from './Button';\nimport ButtonGroup from './ButtonGroup';\nimport Dropdown from './Dropdown';\nvar propTypes = {\n  /**\n   * An html id attribute for the Toggle button, necessary for assistive technologies, such as screen readers.\n   * @type {string|number}\n   * @required\n   */\n  id: PropTypes.any,\n\n  /**\n   * Accessible label for the toggle; the value of `title` if not specified.\n   */\n  toggleLabel: PropTypes.string,\n\n  /** An `href` passed to the non-toggle Button */\n  href: PropTypes.string,\n\n  /** An anchor `target` passed to the non-toggle Button */\n  target: PropTypes.string,\n\n  /** An `onClick` handler passed to the non-toggle Button */\n  onClick: PropTypes.func,\n\n  /** The content of the non-toggle Button.  */\n  title: PropTypes.node.isRequired,\n\n  /** A `type` passed to the non-toggle Button */\n  type: PropTypes.string,\n\n  /** Disables both Buttons  */\n  disabled: PropTypes.bool,\n\n  /** An ARIA accessible role applied to the Menu component. When set to 'menu', The dropdown */\n  menuRole: PropTypes.string,\n\n  /** Whether to render the dropdown menu in the DOM before the first time it is shown */\n  renderMenuOnMount: PropTypes.bool,\n\n  /**\n   *  Which event when fired outside the component will cause it to be closed.\n   *\n   * _see [DropdownMenu](#menu-props) for more details_\n   */\n  rootCloseEvent: PropTypes.string,\n\n  /** @ignore */\n  bsPrefix: PropTypes.string,\n\n  /** @ignore */\n  variant: PropTypes.string,\n\n  /** @ignore */\n  size: PropTypes.string\n};\nvar defaultProps = {\n  toggleLabel: 'Toggle dropdown',\n  type: 'button'\n};\nvar SplitButton = React.forwardRef(function (_ref, ref) {\n  var id = _ref.id,\n      bsPrefix = _ref.bsPrefix,\n      size = _ref.size,\n      variant = _ref.variant,\n      title = _ref.title,\n      type = _ref.type,\n      toggleLabel = _ref.toggleLabel,\n      children = _ref.children,\n      onClick = _ref.onClick,\n      href = _ref.href,\n      target = _ref.target,\n      menuRole = _ref.menuRole,\n      renderMenuOnMount = _ref.renderMenuOnMount,\n      rootCloseEvent = _ref.rootCloseEvent,\n      props = _objectWithoutPropertiesLoose(_ref, [\"id\", \"bsPrefix\", \"size\", \"variant\", \"title\", \"type\", \"toggleLabel\", \"children\", \"onClick\", \"href\", \"target\", \"menuRole\", \"renderMenuOnMount\", \"rootCloseEvent\"]);\n\n  return /*#__PURE__*/React.createElement(Dropdown, _extends({\n    ref: ref\n  }, props, {\n    as: ButtonGroup\n  }), /*#__PURE__*/React.createElement(Button, {\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    bsPrefix: bsPrefix,\n    href: href,\n    target: target,\n    onClick: onClick,\n    type: type\n  }, title), /*#__PURE__*/React.createElement(Dropdown.Toggle, {\n    split: true,\n    id: id ? id.toString() : undefined,\n    size: size,\n    variant: variant,\n    disabled: props.disabled,\n    childBsPrefix: bsPrefix\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    className: \"sr-only\"\n  }, toggleLabel)), /*#__PURE__*/React.createElement(Dropdown.Menu, {\n    role: menuRole,\n    renderOnMount: renderMenuOnMount,\n    rootCloseEvent: rootCloseEvent\n  }, children));\n});\nSplitButton.propTypes = propTypes;\nSplitButton.defaultProps = defaultProps;\nSplitButton.displayName = 'SplitButton';\nexport default SplitButton;"]},"metadata":{},"sourceType":"module"}