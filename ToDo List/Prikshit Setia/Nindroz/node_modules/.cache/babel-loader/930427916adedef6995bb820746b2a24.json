{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nfunction _interopDefault(ex) {\n  return ex && typeof ex === 'object' && 'default' in ex ? ex['default'] : ex;\n}\n\nvar firebase = _interopDefault(require('@firebase/app'));\n\nrequire('@firebase/installations');\n\nvar tslib = require('tslib');\n\nvar util = require('@firebase/util');\n\nvar logger$1 = require('@firebase/logger');\n\nvar component = require('@firebase/component');\n\nvar name = \"@firebase/performance\";\nvar version = \"0.4.0\";\n/**\r\n * @license\r\n * Copyright 2017 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\n\nvar TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\n\nvar TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\n\nvar TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\n\nvar OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\nvar FIRST_PAINT_COUNTER_NAME = '_fp';\nvar FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\nvar FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\nvar CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\nvar CONFIG_EXPIRY_LOCAL_STORAGE_KEY = '@firebase/performance/configexpire';\nvar SERVICE = 'performance';\nvar SERVICE_NAME = 'Performance';\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar _a;\n\nvar ERROR_DESCRIPTION_MAP = (_a = {}, _a[\"trace started\"\n/* TRACE_STARTED_BEFORE */\n] = 'Trace {$traceName} was started before.', _a[\"trace stopped\"\n/* TRACE_STOPPED_BEFORE */\n] = 'Trace {$traceName} is not running.', _a[\"no window\"\n/* NO_WINDOW */\n] = 'Window is not available.', _a[\"no app id\"\n/* NO_APP_ID */\n] = 'App id is not available.', _a[\"no project id\"\n/* NO_PROJECT_ID */\n] = 'Project id is not available.', _a[\"no api key\"\n/* NO_API_KEY */\n] = 'Api key is not available.', _a[\"invalid cc log\"\n/* INVALID_CC_LOG */\n] = 'Attempted to queue invalid cc event', _a[\"FB not default\"\n/* FB_NOT_DEFAULT */\n] = 'Performance can only start when Firebase app instance is the default one.', _a[\"RC response not ok\"\n/* RC_NOT_OK */\n] = 'RC response is not ok', _a[\"invalid attribute name\"\n/* INVALID_ATTRIBUTE_NAME */\n] = 'Attribute name {$attributeName} is invalid.', _a[\"invalid attribute value\"\n/* INVALID_ATTRIBUTE_VALUE */\n] = 'Attribute value {$attributeValue} is invalid.', _a[\"invalid custom metric name\"\n/* INVALID_CUSTOM_METRIC_NAME */\n] = 'Custom metric name {$customMetricName} is invalid', _a[\"invalid String merger input\"\n/* INVALID_STRING_MERGER_PARAMETER */\n] = 'Input for String merger is invalid, contact support team to resolve.', _a);\nvar ERROR_FACTORY = new util.ErrorFactory(SERVICE, SERVICE_NAME, ERROR_DESCRIPTION_MAP);\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar consoleLogger = new logger$1.Logger(SERVICE_NAME);\nconsoleLogger.logLevel = logger$1.LogLevel.INFO;\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\nvar apiInstance;\nvar windowInstance;\n/**\r\n * This class holds a reference to various browser related objects injected by\r\n * set methods.\r\n */\n\nvar Api =\n/** @class */\nfunction () {\n  function Api(window) {\n    this.window = window;\n\n    if (!window) {\n      throw ERROR_FACTORY.create(\"no window\"\n      /* NO_WINDOW */\n      );\n    }\n\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  Api.prototype.getUrl = function () {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  };\n\n  Api.prototype.mark = function (name) {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n\n    this.performance.mark(name);\n  };\n\n  Api.prototype.measure = function (measureName, mark1, mark2) {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n\n    this.performance.measure(measureName, mark1, mark2);\n  };\n\n  Api.prototype.getEntriesByType = function (type) {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n\n    return this.performance.getEntriesByType(type);\n  };\n\n  Api.prototype.getEntriesByName = function (name) {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n\n    return this.performance.getEntriesByName(name);\n  };\n\n  Api.prototype.getTimeOrigin = function () {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return this.performance && (this.performance.timeOrigin || this.performance.timing.navigationStart);\n  };\n\n  Api.prototype.requiredApisAvailable = function () {\n    if (!fetch || !Promise || !this.navigator || !this.navigator.cookieEnabled) {\n      consoleLogger.info('Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.');\n      return false;\n    }\n\n    if (!util.isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n\n    return true;\n  };\n\n  Api.prototype.setupObserver = function (entryType, callback) {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n\n    var observer = new this.PerformanceObserver(function (list) {\n      for (var _i = 0, _a = list.getEntries(); _i < _a.length; _i++) {\n        var entry = _a[_i]; // `entry` is a PerformanceEntry instance.\n\n        callback(entry);\n      }\n    }); // Start observing the entry types you care about.\n\n    observer.observe({\n      entryTypes: [entryType]\n    });\n  };\n\n  Api.getInstance = function () {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n\n    return apiInstance;\n  };\n\n  return Api;\n}();\n\nfunction setupApi(window) {\n  windowInstance = window;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction mergeStrings(part1, part2) {\n  var sizeDiff = part1.length - part2.length;\n\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(\"invalid String merger input\"\n    /* INVALID_STRING_MERGER_PARAMETER */\n    );\n  }\n\n  var resultArray = [];\n\n  for (var i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar settingsServiceInstance;\n\nvar SettingsService =\n/** @class */\nfunction () {\n  function SettingsService() {\n    // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n    this.instrumentationEnabled = true; // The variable which controls logging of custom traces.\n\n    this.dataCollectionEnabled = true; // Configuration flags set through remote config.\n\n    this.loggingEnabled = false; // Sampling rate between 0 and 1.\n\n    this.tracesSamplingRate = 1;\n    this.networkRequestsSamplingRate = 1; // Address of logging service.\n\n    this.logEndPointUrl = 'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto'; // Performance event transport endpoint URL which should be compatible with proto3.\n    // New Address for transport service, not configurable via Remote Config.\n\n    this.flTransportEndpointUrl = mergeStrings('hts/frbslgigp.ogepscmv/ieo/eaylg', 'tp:/ieaeogn-agolai.o/1frlglgc/o');\n    this.transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV'); // Source type for performance event logs.\n\n    this.logSource = 462; // Flags which control per session logging of traces and network requests.\n\n    this.logTraceAfterSampling = false;\n    this.logNetworkAfterSampling = false; // TTL of config retrieved from remote config in hours.\n\n    this.configTimeToLive = 12;\n  }\n\n  SettingsService.prototype.getAppId = function () {\n    var appId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.appId;\n\n    if (!appId) {\n      throw ERROR_FACTORY.create(\"no app id\"\n      /* NO_APP_ID */\n      );\n    }\n\n    return appId;\n  };\n\n  SettingsService.prototype.getProjectId = function () {\n    var projectId = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.projectId;\n\n    if (!projectId) {\n      throw ERROR_FACTORY.create(\"no project id\"\n      /* NO_PROJECT_ID */\n      );\n    }\n\n    return projectId;\n  };\n\n  SettingsService.prototype.getApiKey = function () {\n    var apiKey = this.firebaseAppInstance && this.firebaseAppInstance.options && this.firebaseAppInstance.options.apiKey;\n\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(\"no api key\"\n      /* NO_API_KEY */\n      );\n    }\n\n    return apiKey;\n  };\n\n  SettingsService.prototype.getFlTransportFullUrl = function () {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  };\n\n  SettingsService.getInstance = function () {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n\n    return settingsServiceInstance;\n  };\n\n  return SettingsService;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar iid;\n\nfunction getIidPromise() {\n  var iidPromise = SettingsService.getInstance().installationsService.getId(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  iidPromise.then(function (iidVal) {\n    iid = iidVal;\n  });\n  return iidPromise;\n} // This method should be used after the iid is retrieved by getIidPromise method.\n\n\nfunction getIid() {\n  return iid;\n}\n\nfunction getAuthTokenPromise() {\n  var authTokenPromise = SettingsService.getInstance().installationsService.getToken(); // eslint-disable-next-line @typescript-eslint/no-floating-promises\n\n  authTokenPromise.then(function (authTokenVal) {});\n  return authTokenPromise;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar VisibilityState;\n\n(function (VisibilityState) {\n  VisibilityState[VisibilityState[\"UNKNOWN\"] = 0] = \"UNKNOWN\";\n  VisibilityState[VisibilityState[\"VISIBLE\"] = 1] = \"VISIBLE\";\n  VisibilityState[VisibilityState[\"HIDDEN\"] = 2] = \"HIDDEN\";\n})(VisibilityState || (VisibilityState = {}));\n\nvar RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nvar ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nvar MAX_ATTRIBUTE_NAME_LENGTH = 40;\nvar MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nfunction getServiceWorkerStatus() {\n  var navigator = Api.getInstance().navigator;\n\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return 2\n      /* CONTROLLED */\n      ;\n    } else {\n        return 3\n        /* UNCONTROLLED */\n        ;\n      }\n  } else {\n      return 1\n      /* UNSUPPORTED */\n      ;\n    }\n}\n\nfunction getVisibilityState() {\n  var document = Api.getInstance().document;\n  var visibilityState = document.visibilityState;\n\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nfunction getEffectiveConnectionType() {\n  var navigator = Api.getInstance().navigator;\n  var navigatorConnection = navigator.connection;\n  var effectiveType = navigatorConnection && navigatorConnection.effectiveType;\n\n  switch (effectiveType) {\n    case 'slow-2g':\n      return 1\n      /* CONNECTION_SLOW_2G */\n      ;\n\n    case '2g':\n      return 2\n      /* CONNECTION_2G */\n      ;\n\n    case '3g':\n      return 3\n      /* CONNECTION_3G */\n      ;\n\n    case '4g':\n      return 4\n      /* CONNECTION_4G */\n      ;\n\n    default:\n      return 0\n      /* UNKNOWN */\n      ;\n  }\n}\n\nfunction isValidCustomAttributeName(name) {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n\n  var matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(function (prefix) {\n    return name.startsWith(prefix);\n  });\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nfunction isValidCustomAttributeValue(value) {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar REMOTE_CONFIG_SDK_VERSION = '0.0.1'; // These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\n\nvar DEFAULT_CONFIGS = {\n  loggingEnabled: true\n};\nvar FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nfunction getConfig(iid) {\n  var config = getStoredConfig();\n\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid).then(processConfig).then(function (config) {\n    return storeConfig(config);\n  },\n  /** Do nothing for error, use defaults set in settings service. */\n  function () {});\n}\n\nfunction getStoredConfig() {\n  var localStorage = Api.getInstance().localStorage;\n\n  if (!localStorage) {\n    return;\n  }\n\n  var expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  var configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n\n  if (!configStringified) {\n    return;\n  }\n\n  try {\n    var configResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch (_a) {\n    return;\n  }\n}\n\nfunction storeConfig(config) {\n  var localStorage = Api.getInstance().localStorage;\n\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY, String(Date.now() + SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000));\n}\n\nvar COULD_NOT_GET_CONFIG_MSG = 'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(iid) {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise().then(function (authToken) {\n    var projectId = SettingsService.getInstance().getProjectId();\n    var configEndPoint = \"https://firebaseremoteconfig.googleapis.com/v1/projects/\" + projectId + \"/namespaces/fireperf:fetch?key=\" + SettingsService.getInstance().getApiKey();\n    var request = new Request(configEndPoint, {\n      method: 'POST',\n      headers: {\n        Authorization: FIS_AUTH_PREFIX + \" \" + authToken\n      },\n\n      /* eslint-disable camelcase */\n      body: JSON.stringify({\n        app_instance_id: iid,\n        app_instance_id_token: authToken,\n        app_id: SettingsService.getInstance().getAppId(),\n        app_version: SDK_VERSION,\n        sdk_version: REMOTE_CONFIG_SDK_VERSION\n      })\n      /* eslint-enable camelcase */\n\n    });\n    return fetch(request).then(function (response) {\n      if (response.ok) {\n        return response.json();\n      } // In case response is not ok. This will be caught by catch.\n\n\n      throw ERROR_FACTORY.create(\"RC response not ok\"\n      /* RC_NOT_OK */\n      );\n    });\n  }).catch(function () {\n    consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n    return undefined;\n  });\n}\n/**\r\n * Processes config coming either from calling RC or from local storage.\r\n * This method only runs if call is successful or config in storage\r\n * is valid.\r\n */\n\n\nfunction processConfig(config) {\n  if (!config) {\n    return config;\n  }\n\n  var settingsServiceInstance = SettingsService.getInstance();\n  var entries = config.entries || {};\n\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled = String(entries.fpr_enabled) === 'true';\n  } else {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } // Key from Remote Config has to be non-empty string, otherwsie use local value.\n\n\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(entries.fpr_vc_network_request_sampling_rate);\n  }\n\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(entries.fpr_vc_trace_sampling_rate);\n  } // Set the per session trace and network logging flags.\n\n\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(settingsServiceInstance.tracesSamplingRate);\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(settingsServiceInstance.networkRequestsSamplingRate);\n  return config;\n}\n\nfunction configValid(expiry) {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate) {\n  return Math.random() <= samplingRate;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar initializationStatus = 1\n/* notInitialized */\n;\nvar initializationPromise;\n\nfunction getInitializationPromise() {\n  initializationStatus = 2\n  /* initializationPending */\n  ;\n  initializationPromise = initializationPromise || initializePerf();\n  return initializationPromise;\n}\n\nfunction isPerfInitialized() {\n  return initializationStatus === 3\n  /* initialized */\n  ;\n}\n\nfunction initializePerf() {\n  return getDocumentReadyComplete().then(function () {\n    return getIidPromise();\n  }).then(function (iid) {\n    return getConfig(iid);\n  }).then(function () {\n    return changeInitializationStatus();\n  }, function () {\n    return changeInitializationStatus();\n  });\n}\n/**\r\n * Returns a promise which resolves whenever the document readystate is complete or\r\n * immediately if it is called after page load complete.\r\n */\n\n\nfunction getDocumentReadyComplete() {\n  var document = Api.getInstance().document;\n  return new Promise(function (resolve) {\n    if (document && document.readyState !== 'complete') {\n      var handler_1 = function () {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler_1);\n          resolve();\n        }\n      };\n\n      document.addEventListener('readystatechange', handler_1);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus() {\n  initializationStatus = 3\n  /* initialized */\n  ;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nvar INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000; // If end point does not work, the call will be tried for these many times.\n\nvar DEFAULT_REMAINING_TRIES = 3;\nvar remainingTries = DEFAULT_REMAINING_TRIES;\n/* eslint-enable camelcase */\n\nvar queue = [];\nvar isTransportSetup = false;\n\nfunction setupTransportService() {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\nfunction processQueue(timeOffset) {\n  setTimeout(function () {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    } // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n\n\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents() {\n  // Capture a snapshot of the queue and empty the \"official queue\".\n  var staged = tslib.__spreadArrays(queue);\n\n  queue = [];\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n\n  var log_event = staged.map(function (evt) {\n    return {\n      source_extension_json_proto3: evt.message,\n      event_time_ms: String(evt.eventTime)\n    };\n  });\n  var data = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1,\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event: log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(function () {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = tslib.__spreadArrays(staged, queue);\n    remainingTries--;\n    consoleLogger.info(\"Tries left: \" + remainingTries + \".\");\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(data, staged) {\n  return postToFlEndpoint(data).then(function (res) {\n    if (!res.ok) {\n      consoleLogger.info('Call to Firebase backend failed.');\n    }\n\n    return res.json();\n  }).then(function (res) {\n    // Find the next call wait time from the response.\n    var transportWait = Number(res.nextRequestWaitMillis);\n    var requestOffset = DEFAULT_SEND_INTERVAL_MS;\n\n    if (!isNaN(transportWait)) {\n      requestOffset = Math.max(transportWait, requestOffset);\n    } // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n    // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n\n\n    var logResponseDetails = res.logResponseDetails;\n\n    if (Array.isArray(logResponseDetails) && logResponseDetails.length > 0 && logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER') {\n      queue = tslib.__spreadArrays(staged, queue);\n      consoleLogger.info(\"Retry transport request later.\");\n    }\n\n    remainingTries = DEFAULT_REMAINING_TRIES; // Schedule the next process.\n\n    processQueue(requestOffset);\n  });\n}\n\nfunction postToFlEndpoint(data) {\n  var flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt) {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(\"invalid cc log\"\n    /* INVALID_CC_LOG */\n    );\n  } // Add the new event to the queue.\n\n\n  queue = tslib.__spreadArrays(queue, [evt]);\n}\n/** Log handler for cc service to send the performance logs to the server. */\n\n\nfunction transportHandler( // eslint-disable-next-line @typescript-eslint/no-explicit-any\nserializer) {\n  return function () {\n    var args = [];\n\n    for (var _i = 0; _i < arguments.length; _i++) {\n      args[_i] = arguments[_i];\n    }\n\n    var message = serializer.apply(void 0, args);\n    addToQueue({\n      message: message,\n      eventTime: Date.now()\n    });\n  };\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n/* eslint-enble camelcase */\n\n\nvar logger; // This method is not called before initialization.\n\nfunction sendLog(resource, resourceType) {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n\n  logger(resource, resourceType);\n}\n\nfunction logTrace(trace) {\n  var settingsService = SettingsService.getInstance(); // Do not log if trace is auto generated and instrumentation is disabled.\n\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  } // Do not log if trace is custom and data collection is disabled.\n\n\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  } // Do not log if required apis are not available.\n\n\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  } // Only log the page load auto traces if page is visible.\n\n\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (!settingsService.loggingEnabled || !settingsService.logTraceAfterSampling) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise().then(function () {\n      return sendTraceLog(trace);\n    }, function () {\n      return sendTraceLog(trace);\n    });\n  }\n}\n\nfunction sendTraceLog(trace) {\n  if (getIid()) {\n    setTimeout(function () {\n      return sendLog(trace, 1\n      /* Trace */\n      );\n    }, 0);\n  }\n}\n\nfunction logNetworkRequest(networkRequest) {\n  var settingsService = SettingsService.getInstance(); // Do not log network requests if instrumentation is disabled.\n\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  } // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n\n\n  var networkRequestUrl = networkRequest.url; // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n\n  var logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  var flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n\n  if (networkRequestUrl === logEndpointUrl || networkRequestUrl === flEndpointUrl) {\n    return;\n  }\n\n  if (!settingsService.loggingEnabled || !settingsService.logNetworkAfterSampling) {\n    return;\n  }\n\n  setTimeout(function () {\n    return sendLog(networkRequest, 0\n    /* NetworkRequest */\n    );\n  }, 0);\n}\n\nfunction serializer(resource, resourceType) {\n  if (resourceType === 0\n  /* NetworkRequest */\n  ) {\n      return serializeNetworkRequest(resource);\n    }\n\n  return serializeTrace(resource);\n}\n\nfunction serializeNetworkRequest(networkRequest) {\n  var networkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  var perfMetric = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace) {\n  var traceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n\n  var customAttributes = trace.getAttributes();\n\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  var perfMetric = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo() {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar MAX_METRIC_NAME_LENGTH = 100;\nvar RESERVED_AUTO_PREFIX = '_';\nvar oobMetrics = [FIRST_PAINT_COUNTER_NAME, FIRST_CONTENTFUL_PAINT_COUNTER_NAME, FIRST_INPUT_DELAY_COUNTER_NAME];\n/**\r\n * Returns true if the metric is custom and does not start with reserved prefix, or if\r\n * the metric is one of out of the box page load trace metrics.\r\n */\n\nfunction isValidMetricName(name, traceName) {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n\n  return traceName && traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) && oobMetrics.indexOf(name) > -1 || !name.startsWith(RESERVED_AUTO_PREFIX);\n}\n/**\r\n * Converts the provided value to an integer value to be used in case of a metric.\r\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\r\n *\r\n * @returns Converted integer number to be set for the metric.\r\n */\n\n\nfunction convertMetricValueToInteger(providedValue) {\n  var valueAsInteger = Math.floor(providedValue);\n\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\"Metric value should be an Integer, setting the value as : \" + valueAsInteger + \".\");\n  }\n\n  return valueAsInteger;\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar Trace =\n/** @class */\nfunction () {\n  /**\r\n   * @param name The name of the trace.\r\n   * @param isAuto If the trace is auto-instrumented.\r\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\r\n   * is only set when the trace is built for logging when the user directly uses the user timing\r\n   * api (performance.mark and performance.measure).\r\n   */\n  function Trace(name, isAuto, traceMeasureName) {\n    if (isAuto === void 0) {\n      isAuto = false;\n    }\n\n    this.name = name;\n    this.isAuto = isAuto;\n    this.state = 1\n    /* UNINITIALIZED */\n    ;\n    this.customAttributes = {};\n    this.counters = {};\n    this.api = Api.getInstance();\n    this.randomId = Math.floor(Math.random() * 1000000);\n\n    if (!this.isAuto) {\n      this.traceStartMark = TRACE_START_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      this.traceStopMark = TRACE_STOP_MARK_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n      this.traceMeasure = traceMeasureName || TRACE_MEASURE_PREFIX + \"-\" + this.randomId + \"-\" + this.name;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n  /**\r\n   * Starts a trace. The measurement of the duration starts at this point.\r\n   */\n\n\n  Trace.prototype.start = function () {\n    if (this.state !== 1\n    /* UNINITIALIZED */\n    ) {\n        throw ERROR_FACTORY.create(\"trace started\"\n        /* TRACE_STARTED_BEFORE */\n        , {\n          traceName: this.name\n        });\n      }\n\n    this.api.mark(this.traceStartMark);\n    this.state = 2\n    /* RUNNING */\n    ;\n  };\n  /**\r\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\r\n   * is logged.\r\n   */\n\n\n  Trace.prototype.stop = function () {\n    if (this.state !== 2\n    /* RUNNING */\n    ) {\n        throw ERROR_FACTORY.create(\"trace stopped\"\n        /* TRACE_STOPPED_BEFORE */\n        , {\n          traceName: this.name\n        });\n      }\n\n    this.state = 3\n    /* TERMINATED */\n    ;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(this.traceMeasure, this.traceStartMark, this.traceStopMark);\n    this.calculateTraceMetrics();\n    logTrace(this);\n  };\n  /**\r\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\r\n   * directly. No need to use start and stop methods.\r\n   * @param startTime Trace start time since epoch in millisec\r\n   * @param duration The duraction of the trace in millisec\r\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\r\n   */\n\n\n  Trace.prototype.record = function (startTime, duration, options) {\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n\n    if (options && options.attributes) {\n      this.customAttributes = tslib.__assign({}, options.attributes);\n    }\n\n    if (options && options.metrics) {\n      for (var _i = 0, _a = Object.keys(options.metrics); _i < _a.length; _i++) {\n        var metric = _a[_i];\n\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n\n    logTrace(this);\n  };\n  /**\r\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\r\n   * custom metric if one with the given name does not exist. The value will be floored down to an\r\n   * integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Increment by value\r\n   */\n\n\n  Trace.prototype.incrementMetric = function (counter, numAsInteger) {\n    if (numAsInteger === void 0) {\n      numAsInteger = 1;\n    }\n\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  };\n  /**\r\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\r\n   * given name does not exist. The value will be floored down to an integer.\r\n   * @param counter Name of the custom metric\r\n   * @param numAsInteger Set custom metric to this value\r\n   */\n\n\n  Trace.prototype.putMetric = function (counter, numAsInteger) {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(\"invalid custom metric name\"\n      /* INVALID_CUSTOM_METRIC_NAME */\n      , {\n        customMetricName: counter\n      });\n    }\n  };\n  /**\r\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\r\n   * not exist will return zero.\r\n   * @param counter\r\n   */\n\n\n  Trace.prototype.getMetric = function (counter) {\n    return this.counters[counter] || 0;\n  };\n  /**\r\n   * Sets a custom attribute of a trace to a certain value.\r\n   * @param attr\r\n   * @param value\r\n   */\n\n\n  Trace.prototype.putAttribute = function (attr, value) {\n    var isValidName = isValidCustomAttributeName(attr);\n    var isValidValue = isValidCustomAttributeValue(value);\n\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    } // Throw appropriate error when the attribute name or value is invalid.\n\n\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(\"invalid attribute name\"\n      /* INVALID_ATTRIBUTE_NAME */\n      , {\n        attributeName: attr\n      });\n    }\n\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(\"invalid attribute value\"\n      /* INVALID_ATTRIBUTE_VALUE */\n      , {\n        attributeValue: value\n      });\n    }\n  };\n  /**\r\n   * Retrieves the value a custom attribute of a trace is set to.\r\n   * @param attr\r\n   */\n\n\n  Trace.prototype.getAttribute = function (attr) {\n    return this.customAttributes[attr];\n  };\n\n  Trace.prototype.removeAttribute = function (attr) {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n\n    delete this.customAttributes[attr];\n  };\n\n  Trace.prototype.getAttributes = function () {\n    return tslib.__assign({}, this.customAttributes);\n  };\n\n  Trace.prototype.setStartTime = function (startTime) {\n    this.startTimeUs = startTime;\n  };\n\n  Trace.prototype.setDuration = function (duration) {\n    this.durationUs = duration;\n  };\n  /**\r\n   * Calculates and assigns the duration and start time of the trace using the measure performance\r\n   * entry.\r\n   */\n\n\n  Trace.prototype.calculateTraceMetrics = function () {\n    var perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    var perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor((perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000);\n    }\n  };\n  /**\r\n   * @param navigationTimings A single element array which contains the navigationTIming object of\r\n   * the page load\r\n   * @param paintTimings A array which contains paintTiming object of the page load\r\n   * @param firstInputDelay First input delay in millisec\r\n   */\n\n\n  Trace.createOobTrace = function (navigationTimings, paintTimings, firstInputDelay) {\n    var route = Api.getInstance().getUrl();\n\n    if (!route) {\n      return;\n    }\n\n    var trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    var timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs); // navigationTimings includes only one element.\n\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric('domInteractive', Math.floor(navigationTimings[0].domInteractive * 1000));\n      trace.putMetric('domContentLoadedEventEnd', Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000));\n      trace.putMetric('loadEventEnd', Math.floor(navigationTimings[0].loadEventEnd * 1000));\n    }\n\n    var FIRST_PAINT = 'first-paint';\n    var FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n\n    if (paintTimings) {\n      var firstPaint = paintTimings.find(function (paintObject) {\n        return paintObject.name === FIRST_PAINT;\n      });\n\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(FIRST_PAINT_COUNTER_NAME, Math.floor(firstPaint.startTime * 1000));\n      }\n\n      var firstContentfulPaint = paintTimings.find(function (paintObject) {\n        return paintObject.name === FIRST_CONTENTFUL_PAINT;\n      });\n\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(FIRST_CONTENTFUL_PAINT_COUNTER_NAME, Math.floor(firstContentfulPaint.startTime * 1000));\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(FIRST_INPUT_DELAY_COUNTER_NAME, Math.floor(firstInputDelay * 1000));\n      }\n    }\n\n    logTrace(trace);\n  };\n\n  Trace.createUserTimingTrace = function (measureName) {\n    var trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  };\n\n  return Trace;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nfunction createNetworkRequestEntry(entry) {\n  var performanceEntry = entry;\n\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n\n  var timeOrigin = Api.getInstance().getTimeOrigin();\n  var startTimeUs = Math.floor((performanceEntry.startTime + timeOrigin) * 1000);\n  var timeToResponseInitiatedUs = performanceEntry.responseStart ? Math.floor((performanceEntry.responseStart - performanceEntry.startTime) * 1000) : undefined;\n  var timeToResponseCompletedUs = Math.floor((performanceEntry.responseEnd - performanceEntry.startTime) * 1000); // Remove the query params from logged network request url.\n\n  var url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  var networkRequest = {\n    url: url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs: startTimeUs,\n    timeToResponseInitiatedUs: timeToResponseInitiatedUs,\n    timeToResponseCompletedUs: timeToResponseCompletedUs\n  };\n  logNetworkRequest(networkRequest);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar FID_WAIT_TIME_MS = 5000;\n\nfunction setupOobResources() {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  } // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n\n\n  setTimeout(function () {\n    return setupOobTraces();\n  }, 0);\n  setTimeout(function () {\n    return setupNetworkRequests();\n  }, 0);\n  setTimeout(function () {\n    return setupUserTimingTraces();\n  }, 0);\n}\n\nfunction setupNetworkRequests() {\n  var api = Api.getInstance();\n  var resources = api.getEntriesByType('resource');\n\n  for (var _i = 0, resources_1 = resources; _i < resources_1.length; _i++) {\n    var resource = resources_1[_i];\n    createNetworkRequestEntry(resource);\n  }\n\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces() {\n  var api = Api.getInstance();\n  var navigationTimings = api.getEntriesByType('navigation');\n  var paintTimings = api.getEntriesByType('paint'); // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    var timeoutId_1 = setTimeout(function () {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId_1 = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay(function (fid) {\n      if (timeoutId_1) {\n        clearTimeout(timeoutId_1);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces() {\n  var api = Api.getInstance(); // Run through the measure performance entries collected up to this point.\n\n  var measures = api.getEntriesByType('measure');\n\n  for (var _i = 0, measures_1 = measures; _i < measures_1.length; _i++) {\n    var measure = measures_1[_i];\n    createUserTimingTrace(measure);\n  } // Setup an observer to capture the measures from this point on.\n\n\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure) {\n  var measureName = measure.name; // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n\n  if (measureName.substring(0, TRACE_MEASURE_PREFIX.length) === TRACE_MEASURE_PREFIX) {\n    return;\n  }\n\n  Trace.createUserTimingTrace(measureName);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar PerformanceController =\n/** @class */\nfunction () {\n  function PerformanceController(app) {\n    this.app = app;\n\n    if (Api.getInstance().requiredApisAvailable()) {\n      util.validateIndexedDBOpenable().then(function (isAvailable) {\n        if (isAvailable) {\n          setupTransportService();\n          getInitializationPromise().then(setupOobResources, setupOobResources);\n        }\n      }).catch(function (error) {\n        consoleLogger.info(\"Environment doesn't support IndexedDB: \" + error);\n      });\n    }\n  }\n\n  PerformanceController.prototype.trace = function (name) {\n    return new Trace(name);\n  };\n\n  Object.defineProperty(PerformanceController.prototype, \"instrumentationEnabled\", {\n    get: function () {\n      return SettingsService.getInstance().instrumentationEnabled;\n    },\n    set: function (val) {\n      SettingsService.getInstance().instrumentationEnabled = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  Object.defineProperty(PerformanceController.prototype, \"dataCollectionEnabled\", {\n    get: function () {\n      return SettingsService.getInstance().dataCollectionEnabled;\n    },\n    set: function (val) {\n      SettingsService.getInstance().dataCollectionEnabled = val;\n    },\n    enumerable: false,\n    configurable: true\n  });\n  return PerformanceController;\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n\n\nvar DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nfunction registerPerformance(instance) {\n  var factoryMethod = function (app, installations) {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(\"FB not default\"\n      /* FB_NOT_DEFAULT */\n      );\n    }\n\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(\"no window\"\n      /* NO_WINDOW */\n      );\n    }\n\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  }; // Register performance with firebase-app.\n\n\n  instance.INTERNAL.registerComponent(new component.Component('performance', function (container) {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    var app = container.getProvider('app').getImmediate(); // The following call will always succeed because perf has `import '@firebase/installations'`\n\n    var installations = container.getProvider('installations').getImmediate();\n    return factoryMethod(app, installations);\n  }, \"PUBLIC\"\n  /* PUBLIC */\n  ));\n  instance.registerVersion(name, version);\n}\n\nregisterPerformance(firebase);\nexports.registerPerformance = registerPerformance;","map":{"version":3,"sources":["../src/constants.ts","../src/utils/errors.ts","../src/utils/console_logger.ts","../src/services/api_service.ts","../src/utils/string_merger.ts","../src/services/settings_service.ts","../src/services/iid_service.ts","../src/utils/attributes_utils.ts","../src/services/remote_config_service.ts","../src/services/initialization_service.ts","../src/services/transport_service.ts","../src/services/perf_logger.ts","../src/utils/metric_utils.ts","../src/resources/trace.ts","../src/resources/network_request.ts","../src/services/oob_resources_service.ts","../src/controllers/perf.ts","../index.ts"],"names":["ErrorFactory","Logger","LogLevel","isIndexedDBAvailable","validateIndexedDBOpenable","Component"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;;;;;;;;;;;;;;;;;AAmBO,IAAM,WAAW,GAAG,OAApB;AACP;;AACO,IAAM,uBAAuB,GAAG,qBAAhC;AACP;;AACO,IAAM,sBAAsB,GAAG,oBAA/B;AACP;;AACO,IAAM,oBAAoB,GAAG,uBAA7B;AACP;;AACO,IAAM,0BAA0B,GAAG,MAAnC;AAEA,IAAM,wBAAwB,GAAG,KAAjC;AAEA,IAAM,mCAAmC,GAAG,MAA5C;AAEA,IAAM,8BAA8B,GAAG,MAAvC;AAEA,IAAM,wBAAwB,GAAG,8BAAjC;AAEA,IAAM,+BAA+B,GAC1C,oCADK;AAGA,IAAM,OAAO,GAAG,aAAhB;AACA,IAAM,YAAY,GAAG,aAArB;ACzCP;;;;;;;;;;;;;;;;;;;AAoCA,IAAM,qBAAqB,IAAA,EAAA,GAAA,EAAA,EACzB,EAAA,CAAA;AAAA;AAAA,CAAA,GAAkC,wCADT,EAEzB,EAAA,CAAA;AAAA;AAAA,CAAA,GAAkC,oCAFT,EAGzB,EAAA,CAAA;AAAA;AAAA,CAAA,GAAuB,0BAHE,EAIzB,EAAA,CAAA;AAAA;AAAA,CAAA,GAAuB,0BAJE,EAKzB,EAAA,CAAA;AAAA;AAAA,CAAA,GAA2B,8BALF,EAMzB,EAAA,CAAA;AAAA;AAAA,CAAA,GAAwB,2BANC,EAOzB,EAAA,CAAA;AAAA;AAAA,CAAA,GAA4B,qCAPH,EAQzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,2EATuB,EAUzB,EAAA,CAAA;AAAA;AAAA,CAAA,GAAuB,uBAVE,EAWzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,6CAZuB,EAazB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,+CAduB,EAezB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,mDAhBuB,EAiBzB,EAAA,CAAA;AAAA;AAAA,CAAA,GACE,sEAlBuB,EAmB1B,EAnB0B,CAA3B;AA6BO,IAAM,aAAa,GAAG,IAAIA,IAAAA,CAAAA,YAAJ,CAC3B,OAD2B,EAE3B,YAF2B,EAG3B,qBAH2B,CAAtB;ACjEP;;;;;;;;;;;;;;;;;AAoBO,IAAM,aAAa,GAAG,IAAIC,QAAAA,CAAAA,MAAJ,CAAW,YAAX,CAAtB;AACP,aAAa,CAAC,QAAd,GAAyBC,QAAAA,CAAAA,QAAAA,CAAS,IAAlC;ACrBA;;;;;;;;;;;;;;;;;AA2BA,IAAI,WAAJ;AACA,IAAI,cAAJ;AAUA;;;;;AAIA,IAAA,GAAA;AAAA;AAAA,YAAA;AAUE,WAAA,GAAA,CAAqB,MAArB,EAAoC;AAAf,SAAA,MAAA,GAAA,MAAA;;AACnB,QAAI,CAAC,MAAL,EAAa;AACX,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,OAAN;AACD;;AACD,SAAK,WAAL,GAAmB,MAAM,CAAC,WAA1B;AACA,SAAK,mBAAL,GAA2B,MAAM,CAAC,mBAAlC;AACA,SAAK,cAAL,GAAsB,MAAM,CAAC,QAA7B;AACA,SAAK,SAAL,GAAiB,MAAM,CAAC,SAAxB;AACA,SAAK,QAAL,GAAgB,MAAM,CAAC,QAAvB;;AACA,QAAI,KAAK,SAAL,IAAkB,KAAK,SAAL,CAAe,aAArC,EAAoD;;;AAGlD,WAAK,YAAL,GAAoB,MAAM,CAAC,YAA3B;AACD;;AACD,QAAI,MAAM,CAAC,WAAP,IAAsB,MAAM,CAAC,WAAP,CAAmB,iBAA7C,EAAgE;AAC9D,WAAK,iBAAL,GAAyB,MAAM,CAAC,WAAP,CAAmB,iBAA5C;AACD;AACF;;AAED,EAAA,GAAA,CAAA,SAAA,CAAA,MAAA,GAAA,YAAA;;AAEE,WAAO,KAAK,cAAL,CAAoB,IAApB,CAAyB,KAAzB,CAA+B,GAA/B,EAAoC,CAApC,CAAP;AACD,GAHD;;AAKA,EAAA,GAAA,CAAA,SAAA,CAAA,IAAA,GAAA,UAAK,IAAL,EAAiB;AACf,QAAI,CAAC,KAAK,WAAN,IAAqB,CAAC,KAAK,WAAL,CAAiB,IAA3C,EAAiD;AAC/C;AACD;;AACD,SAAK,WAAL,CAAiB,IAAjB,CAAsB,IAAtB;AACD,GALD;;AAOA,EAAA,GAAA,CAAA,SAAA,CAAA,OAAA,GAAA,UAAQ,WAAR,EAA6B,KAA7B,EAA4C,KAA5C,EAAyD;AACvD,QAAI,CAAC,KAAK,WAAN,IAAqB,CAAC,KAAK,WAAL,CAAiB,OAA3C,EAAoD;AAClD;AACD;;AACD,SAAK,WAAL,CAAiB,OAAjB,CAAyB,WAAzB,EAAsC,KAAtC,EAA6C,KAA7C;AACD,GALD;;AAOA,EAAA,GAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAAgC;AAC9B,QAAI,CAAC,KAAK,WAAN,IAAqB,CAAC,KAAK,WAAL,CAAiB,gBAA3C,EAA6D;AAC3D,aAAO,EAAP;AACD;;AACD,WAAO,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,IAAlC,CAAP;AACD,GALD;;AAOA,EAAA,GAAA,CAAA,SAAA,CAAA,gBAAA,GAAA,UAAiB,IAAjB,EAA6B;AAC3B,QAAI,CAAC,KAAK,WAAN,IAAqB,CAAC,KAAK,WAAL,CAAiB,gBAA3C,EAA6D;AAC3D,aAAO,EAAP;AACD;;AACD,WAAO,KAAK,WAAL,CAAiB,gBAAjB,CAAkC,IAAlC,CAAP;AACD,GALD;;AAOA,EAAA,GAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;;AAEE,WACE,KAAK,WAAL,KACC,KAAK,WAAL,CAAiB,UAAjB,IAA+B,KAAK,WAAL,CAAiB,MAAjB,CAAwB,eADxD,CADF;AAID,GAND;;AAQA,EAAA,GAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAAA;AACE,QACE,CAAC,KAAD,IACA,CAAC,OADD,IAEA,CAAC,KAAK,SAFN,IAGA,CAAC,KAAK,SAAL,CAAe,aAJlB,EAKE;AACA,MAAA,aAAa,CAAC,IAAd,CACE,wGADF;AAGA,aAAO,KAAP;AACD;;AAED,QAAI,CAACC,IAAAA,CAAAA,oBAAAA,EAAL,EAA6B;AAC3B,MAAA,aAAa,CAAC,IAAd,CAAmB,gDAAnB;AACA,aAAO,KAAP;AACD;;AACD,WAAO,IAAP;AACD,GAlBD;;AAoBA,EAAA,GAAA,CAAA,SAAA,CAAA,aAAA,GAAA,UACE,SADF,EAEE,QAFF,EAE6C;AAE3C,QAAI,CAAC,KAAK,mBAAV,EAA+B;AAC7B;AACD;;AACD,QAAM,QAAQ,GAAG,IAAI,KAAK,mBAAT,CAA6B,UAAA,IAAA,EAAI;AAChD,WAAoB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,IAAI,CAAC,UAAL,EAApB,EAAoB,EAAA,GAAA,EAAA,CAAA,MAApB,EAAoB,EAAA,EAApB,EAAuC;AAAlC,YAAM,KAAK,GAAA,EAAA,CAAA,EAAA,CAAX,CAAkC,C;;AAErC,QAAA,QAAQ,CAAC,KAAD,CAAR;AACD;AACF,KALgB,CAAjB,CAL2C,C;;AAa3C,IAAA,QAAQ,CAAC,OAAT,CAAiB;AAAE,MAAA,UAAU,EAAE,CAAC,SAAD;AAAd,KAAjB;AACD,GAhBD;;AAkBO,EAAA,GAAA,CAAA,WAAA,GAAP,YAAA;AACE,QAAI,WAAW,KAAK,SAApB,EAA+B;AAC7B,MAAA,WAAW,GAAG,IAAI,GAAJ,CAAQ,cAAR,CAAd;AACD;;AACD,WAAO,WAAP;AACD,GALM;;AAMT,SAAA,GAAA;AAAC,CAlHD,EAAA;;SAoHgB,Q,CAAS,M,EAAc;AACrC,EAAA,cAAc,GAAG,MAAjB;AACF;AChKA;;;;;;;;;;;;;;;;;;SAmBgB,Y,CAAa,K,EAAe,K,EAAa;AACvD,MAAM,QAAQ,GAAG,KAAK,CAAC,MAAN,GAAe,KAAK,CAAC,MAAtC;;AACA,MAAI,QAAQ,GAAG,CAAX,IAAgB,QAAQ,GAAG,CAA/B,EAAkC;AAChC,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD;;AAED,MAAM,WAAW,GAAG,EAApB;;AACA,OAAK,IAAI,CAAC,GAAG,CAAb,EAAgB,CAAC,GAAG,KAAK,CAAC,MAA1B,EAAkC,CAAC,EAAnC,EAAuC;AACrC,IAAA,WAAW,CAAC,IAAZ,CAAiB,KAAK,CAAC,MAAN,CAAa,CAAb,CAAjB;;AACA,QAAI,KAAK,CAAC,MAAN,GAAe,CAAnB,EAAsB;AACpB,MAAA,WAAW,CAAC,IAAZ,CAAiB,KAAK,CAAC,MAAN,CAAa,CAAb,CAAjB;AACD;AACF;;AAED,SAAO,WAAW,CAAC,IAAZ,CAAiB,EAAjB,CAAP;AACF;AClCA;;;;;;;;;;;;;;;;;;AAsBA,IAAI,uBAAJ;;AAEA,IAAA,eAAA;AAAA;AAAA,YAAA;AAAA,WAAA,eAAA,GAAA;;AAEE,SAAA,sBAAA,GAAyB,IAAzB,CAFF,C;;AAKE,SAAA,qBAAA,GAAwB,IAAxB,CALF,C;;AAQE,SAAA,cAAA,GAAiB,KAAjB,CARF,C;;AAUE,SAAA,kBAAA,GAAqB,CAArB;AACA,SAAA,2BAAA,GAA8B,CAA9B,CAXF,C;;AAcE,SAAA,cAAA,GACE,mEADF,CAdF,C;;;AAkBE,SAAA,sBAAA,GAAyB,YAAY,CACnC,kCADmC,EAEnC,iCAFmC,CAArC;AAKA,SAAA,YAAA,GAAe,YAAY,CAAC,sBAAD,EAAyB,qBAAzB,CAA3B,CAvBF,C;;AA0BE,SAAA,SAAA,GAAY,GAAZ,CA1BF,C;;AA6BE,SAAA,qBAAA,GAAwB,KAAxB;AACA,SAAA,uBAAA,GAA0B,KAA1B,CA9BF,C;;AAiCE,SAAA,gBAAA,GAAmB,EAAnB;AAiDD;;AA3CC,EAAA,eAAA,CAAA,SAAA,CAAA,QAAA,GAAA,YAAA;AACE,QAAM,KAAK,GACT,KAAK,mBAAL,IACA,KAAK,mBAAL,CAAyB,OADzB,IAEA,KAAK,mBAAL,CAAyB,OAAzB,CAAiC,KAHnC;;AAIA,QAAI,CAAC,KAAL,EAAY;AACV,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,OAAN;AACD;;AACD,WAAO,KAAP;AACD,GATD;;AAWA,EAAA,eAAA,CAAA,SAAA,CAAA,YAAA,GAAA,YAAA;AACE,QAAM,SAAS,GACb,KAAK,mBAAL,IACA,KAAK,mBAAL,CAAyB,OADzB,IAEA,KAAK,mBAAL,CAAyB,OAAzB,CAAiC,SAHnC;;AAIA,QAAI,CAAC,SAAL,EAAgB;AACd,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,OAAN;AACD;;AACD,WAAO,SAAP;AACD,GATD;;AAWA,EAAA,eAAA,CAAA,SAAA,CAAA,SAAA,GAAA,YAAA;AACE,QAAM,MAAM,GACV,KAAK,mBAAL,IACA,KAAK,mBAAL,CAAyB,OADzB,IAEA,KAAK,mBAAL,CAAyB,OAAzB,CAAiC,MAHnC;;AAIA,QAAI,CAAC,MAAL,EAAa;AACX,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,OAAN;AACD;;AACD,WAAO,MAAP;AACD,GATD;;AAWA,EAAA,eAAA,CAAA,SAAA,CAAA,qBAAA,GAAA,YAAA;AACE,WAAO,KAAK,sBAAL,CAA4B,MAA5B,CAAmC,OAAnC,EAA4C,KAAK,YAAjD,CAAP;AACD,GAFD;;AAIO,EAAA,eAAA,CAAA,WAAA,GAAP,YAAA;AACE,QAAI,uBAAuB,KAAK,SAAhC,EAA2C;AACzC,MAAA,uBAAuB,GAAG,IAAI,eAAJ,EAA1B;AACD;;AACD,WAAO,uBAAP;AACD,GALM;;AAMT,SAAA,eAAA;AAAC,CAlFD,EAAA;ACxBA;;;;;;;;;;;;;;;;;;AAkBA,IAAI,GAAJ;;SAGgB,a,GAAa;AAC3B,MAAM,UAAU,GAAG,eAAe,CAAC,WAAhB,GAA8B,oBAA9B,CAAmD,KAAnD,EAAnB,CAD2B,C;;AAG3B,EAAA,UAAU,CAAC,IAAX,CAAgB,UAAC,MAAD,EAAe;AAC7B,IAAA,GAAG,GAAG,MAAN;AACD,GAFD;AAGA,SAAO,UAAP;AACD,C,CAED;;;SACgB,M,GAAM;AACpB,SAAO,GAAP;AACD;;SAEe,mB,GAAmB;AACjC,MAAM,gBAAgB,GAAG,eAAe,CAAC,WAAhB,GAA8B,oBAA9B,CAAmD,QAAnD,EAAzB,CADiC,C;;AAGjC,EAAA,gBAAgB,CAAC,IAAjB,CAAsB,UAAC,YAAD,EAAqB,CAE1C,CAFD;AAGA,SAAO,gBAAP;AACF;AC1CA;;;;;;;;;;;;;;;;;;AA2BA,IAAY,eAAZ;;AAAA,CAAA,UAAY,eAAZ,EAA2B;AACzB,EAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,SAAA,CAAA,GAAA,CAAA,CAAA,GAAA,SAAA;AACA,EAAA,eAAA,CAAA,eAAA,CAAA,QAAA,CAAA,GAAA,CAAA,CAAA,GAAA,QAAA;AACD,CAJD,EAAY,eAAe,KAAf,eAAe,GAAA,EAAA,CAA3B;;AA2BA,IAAM,2BAA2B,GAAG,CAAC,WAAD,EAAc,SAAd,EAAyB,KAAzB,CAApC;AACA,IAAM,sBAAsB,GAAG,IAAI,MAAJ,CAAW,gBAAX,CAA/B;AACA,IAAM,yBAAyB,GAAG,EAAlC;AACA,IAAM,0BAA0B,GAAG,GAAnC;;SAEgB,sB,GAAsB;AACpC,MAAM,SAAS,GAAG,GAAG,CAAC,WAAJ,GAAkB,SAApC;;AACA,MAAI,mBAAmB,SAAvB,EAAkC;AAChC,QAAI,SAAS,CAAC,aAAV,CAAwB,UAA5B,EAAwC;AACtC,aAAA;AAAA;AAAA;AACD,KAFD,MAEO;AACL,eAAA;AAAA;AAAA;AACD;AACF,GAND,MAMO;AACL,aAAA;AAAA;AAAA;AACD;AACF;;SAEe,kB,GAAkB;AAChC,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAJ,GAAkB,QAAnC;AACA,MAAM,eAAe,GAAG,QAAQ,CAAC,eAAjC;;AACA,UAAQ,eAAR;AACE,SAAK,SAAL;AACE,aAAO,eAAe,CAAC,OAAvB;;AACF,SAAK,QAAL;AACE,aAAO,eAAe,CAAC,MAAvB;;AACF;AACE,aAAO,eAAe,CAAC,OAAvB;AANJ;AAQD;;SAEe,0B,GAA0B;AACxC,MAAM,SAAS,GAAG,GAAG,CAAC,WAAJ,GAAkB,SAApC;AACA,MAAM,mBAAmB,GAAI,SAAqC,CAAC,UAAnE;AACA,MAAM,aAAa,GACjB,mBAAmB,IAAI,mBAAmB,CAAC,aAD7C;;AAEA,UAAQ,aAAR;AACE,SAAK,SAAL;AACE,aAAA;AAAA;AAAA;;AACF,SAAK,IAAL;AACE,aAAA;AAAA;AAAA;;AACF,SAAK,IAAL;AACE,aAAA;AAAA;AAAA;;AACF,SAAK,IAAL;AACE,aAAA;AAAA;AAAA;;AACF;AACE,aAAA;AAAA;AAAA;AAVJ;AAYD;;SAEe,0B,CAA2B,I,EAAY;AACrD,MAAI,IAAI,CAAC,MAAL,KAAgB,CAAhB,IAAqB,IAAI,CAAC,MAAL,GAAc,yBAAvC,EAAkE;AAChE,WAAO,KAAP;AACD;;AACD,MAAM,qBAAqB,GAAG,2BAA2B,CAAC,IAA5B,CAAiC,UAAA,MAAA,EAAM;AACnE,WAAA,IAAI,CAAC,UAAL,CAAgB,MAAhB,CAAA;AAAuB,GADK,CAA9B;AAGA,SAAO,CAAC,qBAAD,IAA0B,CAAC,CAAC,IAAI,CAAC,KAAL,CAAW,sBAAX,CAAnC;AACD;;SAEe,2B,CAA4B,K,EAAa;AACvD,SAAO,KAAK,CAAC,MAAN,KAAiB,CAAjB,IAAsB,KAAK,CAAC,MAAN,IAAgB,0BAA7C;AACF;ACpHA;;;;;;;;;;;;;;;;;;AA6BA,IAAM,yBAAyB,GAAG,OAAlC,C,CAWA;AACA;;AACA,IAAM,eAAe,GAAoB;AACvC,EAAA,cAAc,EAAE;AADuB,CAAzC;AAsBA,IAAM,eAAe,GAAG,6BAAxB;;SAEgB,S,CAAU,G,EAAW;AACnC,MAAM,MAAM,GAAG,eAAe,EAA9B;;AACA,MAAI,MAAJ,EAAY;AACV,IAAA,aAAa,CAAC,MAAD,CAAb;AACA,WAAO,OAAO,CAAC,OAAR,EAAP;AACD;;AAED,SAAO,eAAe,CAAC,GAAD,CAAf,CACJ,IADI,CACC,aADD,EAEJ,IAFI,CAGH,UAAA,MAAA,EAAM;AAAI,WAAA,WAAW,CAAC,MAAD,CAAX;AAAmB,GAH1B;;AAKH,cAAA,CAAQ,CALL,CAAP;AAOD;;AAED,SAAS,eAAT,GAAwB;AACtB,MAAM,YAAY,GAAG,GAAG,CAAC,WAAJ,GAAkB,YAAvC;;AACA,MAAI,CAAC,YAAL,EAAmB;AACjB;AACD;;AACD,MAAM,YAAY,GAAG,YAAY,CAAC,OAAb,CAAqB,+BAArB,CAArB;;AACA,MAAI,CAAC,YAAD,IAAiB,CAAC,WAAW,CAAC,YAAD,CAAjC,EAAiD;AAC/C;AACD;;AAED,MAAM,iBAAiB,GAAG,YAAY,CAAC,OAAb,CAAqB,wBAArB,CAA1B;;AACA,MAAI,CAAC,iBAAL,EAAwB;AACtB;AACD;;AACD,MAAI;AACF,QAAM,cAAc,GAAyB,IAAI,CAAC,KAAL,CAAW,iBAAX,CAA7C;AACA,WAAO,cAAP;AACD,GAHD,CAGE,OAAA,EAAA,EAAM;AACN;AACD;AACF;;AAED,SAAS,WAAT,CAAqB,MAArB,EAA6D;AAC3D,MAAM,YAAY,GAAG,GAAG,CAAC,WAAJ,GAAkB,YAAvC;;AACA,MAAI,CAAC,MAAD,IAAW,CAAC,YAAhB,EAA8B;AAC5B;AACD;;AAED,EAAA,YAAY,CAAC,OAAb,CAAqB,wBAArB,EAA+C,IAAI,CAAC,SAAL,CAAe,MAAf,CAA/C;AACA,EAAA,YAAY,CAAC,OAAb,CACE,+BADF,EAEE,MAAM,CACJ,IAAI,CAAC,GAAL,KACE,eAAe,CAAC,WAAhB,GAA8B,gBAA9B,GAAiD,EAAjD,GAAsD,EAAtD,GAA2D,IAFzD,CAFR;AAOD;;AAED,IAAM,wBAAwB,GAC5B,kDADF;;AAGA,SAAS,eAAT,CACE,GADF,EACa;;AAGX,SAAO,mBAAmB,GACvB,IADI,CACC,UAAA,SAAA,EAAS;AACb,QAAM,SAAS,GAAG,eAAe,CAAC,WAAhB,GAA8B,YAA9B,EAAlB;AACA,QAAM,cAAc,GAAG,6DAA2D,SAA3D,GAAoE,iCAApE,GAAsG,eAAe,CAAC,WAAhB,GAA8B,SAA9B,EAA7H;AACA,QAAM,OAAO,GAAG,IAAI,OAAJ,CAAY,cAAZ,EAA4B;AAC1C,MAAA,MAAM,EAAE,MADkC;AAE1C,MAAA,OAAO,EAAE;AAAE,QAAA,aAAa,EAAK,eAAe,GAAA,GAAf,GAAmB;AAAvC,OAFiC;;;AAI1C,MAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe;AACnB,QAAA,eAAe,EAAE,GADE;AAEnB,QAAA,qBAAqB,EAAE,SAFJ;AAGnB,QAAA,MAAM,EAAE,eAAe,CAAC,WAAhB,GAA8B,QAA9B,EAHW;AAInB,QAAA,WAAW,EAAE,WAJM;AAKnB,QAAA,WAAW,EAAE;AALM,OAAf;;;AAJoC,KAA5B,CAAhB;AAaA,WAAO,KAAK,CAAC,OAAD,CAAL,CAAe,IAAf,CAAoB,UAAA,QAAA,EAAQ;AACjC,UAAI,QAAQ,CAAC,EAAb,EAAiB;AACf,eAAO,QAAQ,CAAC,IAAT,EAAP;AACD,OAHgC,C;;;AAKjC,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,OAAN;AACD,KANM,CAAP;AAOD,GAxBI,EAyBJ,KAzBI,CAyBE,YAAA;AACL,IAAA,aAAa,CAAC,IAAd,CAAmB,wBAAnB;AACA,WAAO,SAAP;AACD,GA5BI,CAAP;AA6BD;AAED;;;;;;;AAKA,SAAS,aAAT,CACE,MADF,EAC+B;AAE7B,MAAI,CAAC,MAAL,EAAa;AACX,WAAO,MAAP;AACD;;AACD,MAAM,uBAAuB,GAAG,eAAe,CAAC,WAAhB,EAAhC;AACA,MAAM,OAAO,GAAG,MAAM,CAAC,OAAP,IAAkB,EAAlC;;AACA,MAAI,OAAO,CAAC,WAAR,KAAwB,SAA5B,EAAuC;;;AAGrC,IAAA,uBAAuB,CAAC,cAAxB,GACE,MAAM,CAAC,OAAO,CAAC,WAAT,CAAN,KAAgC,MADlC;AAED,GALD,MAKyD;;;AAGvD,IAAA,uBAAuB,CAAC,cAAxB,GAAyC,eAAe,CAAC,cAAzD;AACD;;AACD,MAAI,OAAO,CAAC,cAAZ,EAA4B;AAC1B,IAAA,uBAAuB,CAAC,SAAxB,GAAoC,MAAM,CAAC,OAAO,CAAC,cAAT,CAA1C;AAGD;;AAED,MAAI,OAAO,CAAC,oBAAZ,EAAkC;AAChC,IAAA,uBAAuB,CAAC,cAAxB,GAAyC,OAAO,CAAC,oBAAjD;AAGD,GA3B4B,C;;;AA8B7B,MAAI,OAAO,CAAC,qBAAZ,EAAmC;AACjC,IAAA,uBAAuB,CAAC,YAAxB,GAAuC,OAAO,CAAC,qBAA/C;AAGD;;AAED,MAAI,OAAO,CAAC,oCAAR,KAAiD,SAArD,EAAgE;AAC9D,IAAA,uBAAuB,CAAC,2BAAxB,GAAsD,MAAM,CAC1D,OAAO,CAAC,oCADkD,CAA5D;AAMD;;AACD,MAAI,OAAO,CAAC,0BAAR,KAAuC,SAA3C,EAAsD;AACpD,IAAA,uBAAuB,CAAC,kBAAxB,GAA6C,MAAM,CACjD,OAAO,CAAC,0BADyC,CAAnD;AAMD,GAnD4B,C;;;AAqD7B,EAAA,uBAAuB,CAAC,qBAAxB,GAAgD,sBAAsB,CACpE,uBAAuB,CAAC,kBAD4C,CAAtE;AAGA,EAAA,uBAAuB,CAAC,uBAAxB,GAAkD,sBAAsB,CACtE,uBAAuB,CAAC,2BAD8C,CAAxE;AAGA,SAAO,MAAP;AACD;;AAED,SAAS,WAAT,CAAqB,MAArB,EAAmC;AACjC,SAAO,MAAM,CAAC,MAAD,CAAN,GAAiB,IAAI,CAAC,GAAL,EAAxB;AACD;;AAED,SAAS,sBAAT,CAAgC,YAAhC,EAAoD;AAClD,SAAO,IAAI,CAAC,MAAL,MAAiB,YAAxB;AACF;ACxOA;;;;;;;;;;;;;;;;;;AA2BA,IAAI,oBAAoB,GAAA;AAAA;AAAxB;AAEA,IAAI,qBAAJ;;SAEgB,wB,GAAwB;AACtC,EAAA,oBAAoB,GAAA;AAAA;AAApB;AAEA,EAAA,qBAAqB,GAAG,qBAAqB,IAAI,cAAc,EAA/D;AAEA,SAAO,qBAAP;AACD;;SAEe,iB,GAAiB;AAC/B,SAAO,oBAAoB,KAAA;AAAA;AAA3B;AACD;;AAED,SAAS,cAAT,GAAuB;AACrB,SAAO,wBAAwB,GAC5B,IADI,CACC,YAAA;AAAM,WAAA,aAAa,EAAb;AAAe,GADtB,EAEJ,IAFI,CAEC,UAAA,GAAA,EAAG;AAAI,WAAA,SAAS,CAAC,GAAD,CAAT;AAAc,GAFtB,EAGJ,IAHI,CAIH,YAAA;AAAM,WAAA,0BAA0B,EAA1B;AAA4B,GAJ/B,EAKH,YAAA;AAAM,WAAA,0BAA0B,EAA1B;AAA4B,GAL/B,CAAP;AAOD;AAED;;;;;;AAIA,SAAS,wBAAT,GAAiC;AAC/B,MAAM,QAAQ,GAAG,GAAG,CAAC,WAAJ,GAAkB,QAAnC;AACA,SAAO,IAAI,OAAJ,CAAY,UAAA,OAAA,EAAO;AACxB,QAAI,QAAQ,IAAI,QAAQ,CAAC,UAAT,KAAwB,UAAxC,EAAoD;AAClD,UAAM,SAAO,GAAG,YAAA;AACd,YAAI,QAAQ,CAAC,UAAT,KAAwB,UAA5B,EAAwC;AACtC,UAAA,QAAQ,CAAC,mBAAT,CAA6B,kBAA7B,EAAiD,SAAjD;AACA,UAAA,OAAO;AACR;AACF,OALD;;AAMA,MAAA,QAAQ,CAAC,gBAAT,CAA0B,kBAA1B,EAA8C,SAA9C;AACD,KARD,MAQO;AACL,MAAA,OAAO;AACR;AACF,GAZM,CAAP;AAaD;;AAED,SAAS,0BAAT,GAAmC;AACjC,EAAA,oBAAoB,GAAA;AAAA;AAApB;AACF;AC5EA;;;;;;;;;;;;;;;;;;AAqBA,IAAM,wBAAwB,GAAG,KAAK,IAAtC;AACA,IAAM,0BAA0B,GAAG,MAAM,IAAzC,C,CACA;;AACA,IAAM,uBAAuB,GAAG,CAAhC;AACA,IAAI,cAAc,GAAG,uBAArB;AA6BA;;AAEA,IAAI,KAAK,GAAiB,EAA1B;AAEA,IAAI,gBAAgB,GAAY,KAAhC;;SAEgB,qB,GAAqB;AACnC,MAAI,CAAC,gBAAL,EAAuB;AACrB,IAAA,YAAY,CAAC,0BAAD,CAAZ;AACA,IAAA,gBAAgB,GAAG,IAAnB;AACD;AACF;;AAUD,SAAS,YAAT,CAAsB,UAAtB,EAAwC;AACtC,EAAA,UAAU,CAAC,YAAA;;AAET,QAAI,cAAc,KAAK,CAAvB,EAA0B;AACxB;AACD,KAJQ,C;;;AAOT,QAAI,CAAC,KAAK,CAAC,MAAX,EAAmB;AACjB,aAAO,YAAY,CAAC,wBAAD,CAAnB;AACD;;AAED,IAAA,mBAAmB;AACpB,GAZS,EAYP,UAZO,CAAV;AAaD;;AAED,SAAS,mBAAT,GAA4B;;AAE1B,MAAM,MAAM,GAAA,KAAA,CAAA,cAAA,CAAO,KAAP,CAAZ;;AACA,EAAA,KAAK,GAAG,EAAR;;;;AAIA,MAAM,SAAS,GAAU,MAAM,CAAC,GAAP,CAAW,UAAA,GAAA,EAAG;AAAI,WAAC;AAC1C,MAAA,4BAA4B,EAAE,GAAG,CAAC,OADQ;AAE1C,MAAA,aAAa,EAAE,MAAM,CAAC,GAAG,CAAC,SAAL;AAFqB,KAAD;AAGzC,GAHuB,CAAzB;AAKA,MAAM,IAAI,GAA4B;AACpC,IAAA,eAAe,EAAE,MAAM,CAAC,IAAI,CAAC,GAAL,EAAD,CADa;AAEpC,IAAA,WAAW,EAAE;AACX,MAAA,WAAW,EAAE,CADF;AAEX,MAAA,cAAc,EAAE;AAFL,KAFuB;AAMpC,IAAA,UAAU,EAAE,eAAe,CAAC,WAAhB,GAA8B,SANN;AAOpC,IAAA,SAAS,EAAA;AAP2B,GAAtC;;;AAWA,EAAA,cAAc,CAAC,IAAD,EAAO,MAAP,CAAd,CAA6B,KAA7B,CAAmC,YAAA;;;AAGjC,IAAA,KAAK,GAAA,KAAA,CAAA,cAAA,CAAO,MAAP,EAAkB,KAAlB,CAAL;AACA,IAAA,cAAc;AACd,IAAA,aAAa,CAAC,IAAd,CAAmB,iBAAe,cAAf,GAA6B,GAAhD;AACA,IAAA,YAAY,CAAC,wBAAD,CAAZ;AACD,GAPD;AAQD;;AAED,SAAS,cAAT,CACE,IADF,EAEE,MAFF,EAEsB;AAEpB,SAAO,gBAAgB,CAAC,IAAD,CAAhB,CACJ,IADI,CACC,UAAA,GAAA,EAAG;AACP,QAAI,CAAC,GAAG,CAAC,EAAT,EAAa;AACX,MAAA,aAAa,CAAC,IAAd,CAAmB,kCAAnB;AACD;;AACD,WAAO,GAAG,CAAC,IAAJ,EAAP;AACD,GANI,EAOJ,IAPI,CAOC,UAAA,GAAA,EAAG;;AAEP,QAAM,aAAa,GAAG,MAAM,CAAC,GAAG,CAAC,qBAAL,CAA5B;AACA,QAAI,aAAa,GAAG,wBAApB;;AACA,QAAI,CAAC,KAAK,CAAC,aAAD,CAAV,EAA2B;AACzB,MAAA,aAAa,GAAG,IAAI,CAAC,GAAL,CAAS,aAAT,EAAwB,aAAxB,CAAhB;AACD,KANM,C;;;;AAUP,QAAM,kBAAkB,GAAyB,GAAG,CAAC,kBAArD;;AACA,QACE,KAAK,CAAC,OAAN,CAAc,kBAAd,KACA,kBAAkB,CAAC,MAAnB,GAA4B,CAD5B,IAEA,kBAAkB,CAAC,CAAD,CAAlB,CAAsB,cAAtB,KAAyC,qBAH3C,EAIE;AACA,MAAA,KAAK,GAAA,KAAA,CAAA,cAAA,CAAO,MAAP,EAAkB,KAAlB,CAAL;AACA,MAAA,aAAa,CAAC,IAAd,CAAmB,gCAAnB;AACD;;AAED,IAAA,cAAc,GAAG,uBAAjB,CApBO,C;;AAsBP,IAAA,YAAY,CAAC,aAAD,CAAZ;AACD,GA9BI,CAAP;AA+BD;;AAED,SAAS,gBAAT,CAA0B,IAA1B,EAAuD;AACrD,MAAM,kBAAkB,GAAG,eAAe,CAAC,WAAhB,GAA8B,qBAA9B,EAA3B;AACA,SAAO,KAAK,CAAC,kBAAD,EAAqB;AAC/B,IAAA,MAAM,EAAE,MADuB;AAE/B,IAAA,IAAI,EAAE,IAAI,CAAC,SAAL,CAAe,IAAf;AAFyB,GAArB,CAAZ;AAID;;AAED,SAAS,UAAT,CAAoB,GAApB,EAAmC;AACjC,MAAI,CAAC,GAAG,CAAC,SAAL,IAAkB,CAAC,GAAG,CAAC,OAA3B,EAAoC;AAClC,UAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,KAAN;AACD,GAHgC,C;;;AAKjC,EAAA,KAAK,GAAA,KAAA,CAAA,cAAA,CAAO,KAAP,EAAY,CAAE,GAAF,CAAZ,CAAL;AACD;AAED;;;SACgB,gB,EACd;AACA,U,EAAsC;AAEtC,SAAO,YAAA;AAAC,QAAA,IAAA,GAAA,EAAA;;SAAA,IAAA,EAAA,GAAA,C,EAAA,EAAA,GAAA,SAAA,CAAA,M,EAAA,EAAA,E,EAAO;AAAP,MAAA,IAAA,CAAA,EAAA,CAAA,GAAA,SAAA,CAAA,EAAA,CAAA;;;AACN,QAAM,OAAO,GAAG,UAAU,CAAA,KAAV,CAAU,KAAA,CAAV,EAAc,IAAd,CAAhB;AACA,IAAA,UAAU,CAAC;AACT,MAAA,OAAO,EAAA,OADE;AAET,MAAA,SAAS,EAAE,IAAI,CAAC,GAAL;AAFF,KAAD,CAAV;AAID,GAND;AAOF;AC7LA;;;;;;;;;;;;;;;;;AAqFA;;;AAEA,IAAI,MAAJ,C,CAIA;;AACA,SAAS,OAAT,CACE,QADF,EAEE,YAFF,EAE4B;AAE1B,MAAI,CAAC,MAAL,EAAa;AACX,IAAA,MAAM,GAAG,gBAAgB,CAAC,UAAD,CAAzB;AACD;;AACD,EAAA,MAAM,CAAC,QAAD,EAAW,YAAX,CAAN;AACD;;SAEe,Q,CAAS,K,EAAY;AACnC,MAAM,eAAe,GAAG,eAAe,CAAC,WAAhB,EAAxB,CADmC,C;;AAGnC,MAAI,CAAC,eAAe,CAAC,sBAAjB,IAA2C,KAAK,CAAC,MAArD,EAA6D;AAC3D;AACD,GALkC,C;;;AAOnC,MAAI,CAAC,eAAe,CAAC,qBAAjB,IAA0C,CAAC,KAAK,CAAC,MAArD,EAA6D;AAC3D;AACD,GATkC,C;;;AAWnC,MAAI,CAAC,GAAG,CAAC,WAAJ,GAAkB,qBAAlB,EAAL,EAAgD;AAC9C;AACD,GAbkC,C;;;AAgBnC,MAAI,KAAK,CAAC,MAAN,IAAgB,kBAAkB,OAAO,eAAe,CAAC,OAA7D,EAAsE;AACpE;AACD;;AAED,MACE,CAAC,eAAe,CAAC,cAAjB,IACA,CAAC,eAAe,CAAC,qBAFnB,EAGE;AACA;AACD;;AAED,MAAI,iBAAiB,EAArB,EAAyB;AACvB,IAAA,YAAY,CAAC,KAAD,CAAZ;AACD,GAFD,MAEO;;;AAGL,IAAA,wBAAwB,GAAG,IAA3B,CACE,YAAA;AAAM,aAAA,YAAY,CAAC,KAAD,CAAZ;AAAmB,KAD3B,EAEE,YAAA;AAAM,aAAA,YAAY,CAAC,KAAD,CAAZ;AAAmB,KAF3B;AAID;AACF;;AAED,SAAS,YAAT,CAAsB,KAAtB,EAAkC;AAChC,MAAI,MAAM,EAAV,EAAc;AACZ,IAAA,UAAU,CAAC,YAAA;AAAM,aAAA,OAAO,CAAC,KAAD,EAAM;AAAA;AAAN,OAAP;AAAkC,KAAzC,EAA2C,CAA3C,CAAV;AACD;AACF;;SAEe,iB,CAAkB,c,EAA8B;AAC9D,MAAM,eAAe,GAAG,eAAe,CAAC,WAAhB,EAAxB,CAD8D,C;;AAG9D,MAAI,CAAC,eAAe,CAAC,sBAArB,EAA6C;AAC3C;AACD,GAL6D,C;;;;AAS9D,MAAM,iBAAiB,GAAG,cAAc,CAAC,GAAzC,CAT8D,C;;;AAa9D,MAAM,cAAc,GAAG,eAAe,CAAC,cAAhB,CAA+B,KAA/B,CAAqC,GAArC,EAA0C,CAA1C,CAAvB;AACA,MAAM,aAAa,GAAG,eAAe,CAAC,sBAAhB,CAAuC,KAAvC,CAA6C,GAA7C,EAAkD,CAAlD,CAAtB;;AACA,MACE,iBAAiB,KAAK,cAAtB,IACA,iBAAiB,KAAK,aAFxB,EAGE;AACA;AACD;;AAED,MACE,CAAC,eAAe,CAAC,cAAjB,IACA,CAAC,eAAe,CAAC,uBAFnB,EAGE;AACA;AACD;;AAED,EAAA,UAAU,CAAC,YAAA;AAAM,WAAA,OAAO,CAAC,cAAD,EAAe;AAAA;AAAf,KAAP;AAAoD,GAA3D,EAA6D,CAA7D,CAAV;AACD;;AAED,SAAS,UAAT,CACE,QADF,EAEE,YAFF,EAE4B;AAE1B,MAAI,YAAY,KAAA;AAAA;AAAhB,IAAkD;AAChD,aAAO,uBAAuB,CAAC,QAAD,CAA9B;AACD;;AACD,SAAO,cAAc,CAAC,QAAD,CAArB;AACD;;AAED,SAAS,uBAAT,CAAiC,cAAjC,EAA+D;AAC7D,MAAM,oBAAoB,GAAyB;AACjD,IAAA,GAAG,EAAE,cAAc,CAAC,GAD6B;AAEjD,IAAA,WAAW,EAAE,cAAc,CAAC,UAAf,IAA6B,CAFO;AAGjD,IAAA,kBAAkB,EAAE,GAH6B;AAIjD,IAAA,sBAAsB,EAAE,cAAc,CAAC,oBAJU;AAKjD,IAAA,oBAAoB,EAAE,cAAc,CAAC,WALY;AAMjD,IAAA,6BAA6B,EAAE,cAAc,CAAC,yBANG;AAOjD,IAAA,6BAA6B,EAAE,cAAc,CAAC;AAPG,GAAnD;AASA,MAAM,UAAU,GAAmB;AACjC,IAAA,gBAAgB,EAAE,kBAAkB,EADH;AAEjC,IAAA,sBAAsB,EAAE;AAFS,GAAnC;AAIA,SAAO,IAAI,CAAC,SAAL,CAAe,UAAf,CAAP;AACD;;AAED,SAAS,cAAT,CAAwB,KAAxB,EAAoC;AAClC,MAAM,WAAW,GAAgB;AAC/B,IAAA,IAAI,EAAE,KAAK,CAAC,IADmB;AAE/B,IAAA,OAAO,EAAE,KAAK,CAAC,MAFgB;AAG/B,IAAA,oBAAoB,EAAE,KAAK,CAAC,WAHG;AAI/B,IAAA,WAAW,EAAE,KAAK,CAAC;AAJY,GAAjC;;AAOA,MAAI,MAAM,CAAC,IAAP,CAAY,KAAK,CAAC,QAAlB,EAA4B,MAA5B,KAAuC,CAA3C,EAA8C;AAC5C,IAAA,WAAW,CAAC,QAAZ,GAAuB,KAAK,CAAC,QAA7B;AACD;;AACD,MAAM,gBAAgB,GAAG,KAAK,CAAC,aAAN,EAAzB;;AACA,MAAI,MAAM,CAAC,IAAP,CAAY,gBAAZ,EAA8B,MAA9B,KAAyC,CAA7C,EAAgD;AAC9C,IAAA,WAAW,CAAC,iBAAZ,GAAgC,gBAAhC;AACD;;AAED,MAAM,UAAU,GAAiB;AAC/B,IAAA,gBAAgB,EAAE,kBAAkB,EADL;AAE/B,IAAA,YAAY,EAAE;AAFiB,GAAjC;AAIA,SAAO,IAAI,CAAC,SAAL,CAAe,UAAf,CAAP;AACD;;AAED,SAAS,kBAAT,GAA2B;AACzB,SAAO;AACL,IAAA,aAAa,EAAE,eAAe,CAAC,WAAhB,GAA8B,QAA9B,EADV;AAEL,IAAA,eAAe,EAAE,MAAM,EAFlB;AAGL,IAAA,YAAY,EAAE;AACZ,MAAA,WAAW,EAAE,WADD;AAEZ,MAAA,QAAQ,EAAE,GAAG,CAAC,WAAJ,GAAkB,MAAlB,EAFE;AAGZ,MAAA,qBAAqB,EAAE,sBAAsB,EAHjC;AAIZ,MAAA,gBAAgB,EAAE,kBAAkB,EAJxB;AAKZ,MAAA,yBAAyB,EAAE,0BAA0B;AALzC,KAHT;AAUL,IAAA,yBAAyB,EAAE;AAVtB,GAAP;AAYF;AClPA;;;;;;;;;;;;;;;;;;AAyBA,IAAM,sBAAsB,GAAG,GAA/B;AACA,IAAM,oBAAoB,GAAG,GAA7B;AACA,IAAM,UAAU,GAAG,CACjB,wBADiB,EAEjB,mCAFiB,EAGjB,8BAHiB,CAAnB;AAMA;;;;;SAIgB,iB,CAAkB,I,EAAc,S,EAAkB;AAChE,MAAI,IAAI,CAAC,MAAL,KAAgB,CAAhB,IAAqB,IAAI,CAAC,MAAL,GAAc,sBAAvC,EAA+D;AAC7D,WAAO,KAAP;AACD;;AACD,SACG,SAAS,IACR,SAAS,CAAC,UAAV,CAAqB,0BAArB,CADD,IAEC,UAAU,CAAC,OAAX,CAAmB,IAAnB,IAA2B,CAAC,CAF9B,IAGA,CAAC,IAAI,CAAC,UAAL,CAAgB,oBAAhB,CAJH;AAMD;AAED;;;;;;;;SAMgB,2B,CAA4B,a,EAAqB;AAC/D,MAAM,cAAc,GAAW,IAAI,CAAC,KAAL,CAAW,aAAX,CAA/B;;AACA,MAAI,cAAc,GAAG,aAArB,EAAoC;AAClC,IAAA,aAAa,CAAC,IAAd,CACE,+DAA6D,cAA7D,GAA2E,GAD7E;AAGD;;AACD,SAAO,cAAP;AACF;AC/DA;;;;;;;;;;;;;;;;;;AA6CA,IAAA,KAAA;AAAA;AAAA,YAAA;;;;;;;;AAmBE,WAAA,KAAA,CACW,IADX,EAEW,MAFX,EAGE,gBAHF,EAG2B;AADhB,QAAA,MAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,MAAA,GAAA,KAAA;AAAc;;AADd,SAAA,IAAA,GAAA,IAAA;AACA,SAAA,MAAA,GAAA,MAAA;AApBH,SAAA,KAAA,GAAK;AAAA;AAAL;AAGA,SAAA,gBAAA,GAA8C,EAA9C;AACR,SAAA,QAAA,GAA8C,EAA9C;AACQ,SAAA,GAAA,GAAM,GAAG,CAAC,WAAJ,EAAN;AACA,SAAA,QAAA,GAAW,IAAI,CAAC,KAAL,CAAW,IAAI,CAAC,MAAL,KAAgB,OAA3B,CAAX;;AAiBN,QAAI,CAAC,KAAK,MAAV,EAAkB;AAChB,WAAK,cAAL,GAAyB,uBAAuB,GAAA,GAAvB,GAA2B,KAAK,QAAhC,GAAwC,GAAxC,GAA4C,KAAK,IAA1E;AACA,WAAK,aAAL,GAAwB,sBAAsB,GAAA,GAAtB,GAA0B,KAAK,QAA/B,GAAuC,GAAvC,GAA2C,KAAK,IAAxE;AACA,WAAK,YAAL,GACE,gBAAgB,IACb,oBAAoB,GAAA,GAApB,GAAwB,KAAK,QAA7B,GAAqC,GAArC,GAAyC,KAAK,IAFnD;;AAIA,UAAI,gBAAJ,EAAsB;;;AAGpB,aAAK,qBAAL;AACD;AACF;AACF;;;;;;AAKD,EAAA,KAAA,CAAA,SAAA,CAAA,KAAA,GAAA,YAAA;AACE,QAAI,KAAK,KAAL,KAAU;AAAA;AAAd,MAA6C;AAC3C,cAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,UAAqD;AACzD,UAAA,SAAS,EAAE,KAAK;AADyC,SAArD,CAAN;AAGD;;AACD,SAAK,GAAL,CAAS,IAAT,CAAc,KAAK,cAAnB;AACA,SAAK,KAAL,GAAU;AAAA;AAAV;AACD,GARD;;;;;;;AAcA,EAAA,KAAA,CAAA,SAAA,CAAA,IAAA,GAAA,YAAA;AACE,QAAI,KAAK,KAAL,KAAU;AAAA;AAAd,MAAuC;AACrC,cAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,UAAqD;AACzD,UAAA,SAAS,EAAE,KAAK;AADyC,SAArD,CAAN;AAGD;;AACD,SAAK,KAAL,GAAU;AAAA;AAAV;AACA,SAAK,GAAL,CAAS,IAAT,CAAc,KAAK,aAAnB;AACA,SAAK,GAAL,CAAS,OAAT,CACE,KAAK,YADP,EAEE,KAAK,cAFP,EAGE,KAAK,aAHP;AAKA,SAAK,qBAAL;AACA,IAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GAfD;;;;;;;;;;AAwBA,EAAA,KAAA,CAAA,SAAA,CAAA,MAAA,GAAA,UACE,SADF,EAEE,QAFF,EAGE,OAHF,EAMG;AAED,SAAK,UAAL,GAAkB,IAAI,CAAC,KAAL,CAAW,QAAQ,GAAG,IAAtB,CAAlB;AACA,SAAK,WAAL,GAAmB,IAAI,CAAC,KAAL,CAAW,SAAS,GAAG,IAAvB,CAAnB;;AACA,QAAI,OAAO,IAAI,OAAO,CAAC,UAAvB,EAAmC;AACjC,WAAK,gBAAL,GAAqB,KAAA,CAAA,QAAA,CAAA,EAAA,EAAQ,OAAO,CAAC,UAAhB,CAArB;AACD;;AACD,QAAI,OAAO,IAAI,OAAO,CAAC,OAAvB,EAAgC;AAC9B,WAAqB,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,MAAM,CAAC,IAAP,CAAY,OAAO,CAAC,OAApB,CAArB,EAAqB,EAAA,GAAA,EAAA,CAAA,MAArB,EAAqB,EAAA,EAArB,EAAmD;AAA9C,YAAM,MAAM,GAAA,EAAA,CAAA,EAAA,CAAZ;;AACH,YAAI,CAAC,KAAK,CAAC,MAAM,CAAC,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAAD,CAAP,CAAV,EAA6C;AAC3C,eAAK,QAAL,CAAc,MAAd,IAAwB,MAAM,CAAC,IAAI,CAAC,KAAL,CAAW,OAAO,CAAC,OAAR,CAAgB,MAAhB,CAAX,CAAD,CAA9B;AACD;AACF;AACF;;AACD,IAAA,QAAQ,CAAC,IAAD,CAAR;AACD,GArBD;;;;;;;;;;AA8BA,EAAA,KAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,OAAhB,EAAiC,YAAjC,EAAiD;AAAhB,QAAA,YAAA,KAAA,KAAA,CAAA,EAAA;AAAA,MAAA,YAAA,GAAA,CAAA;AAAgB;;AAC/C,QAAI,KAAK,QAAL,CAAc,OAAd,MAA2B,SAA/B,EAA0C;AACxC,WAAK,SAAL,CAAe,OAAf,EAAwB,YAAxB;AACD,KAFD,MAEO;AACL,WAAK,SAAL,CAAe,OAAf,EAAwB,KAAK,QAAL,CAAc,OAAd,IAAyB,YAAjD;AACD;AACF,GAND;;;;;;;;;AAcA,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,OAAV,EAA2B,YAA3B,EAA+C;AAC7C,QAAI,iBAAiB,CAAC,OAAD,EAAU,KAAK,IAAf,CAArB,EAA2C;AACzC,WAAK,QAAL,CAAc,OAAd,IAAyB,2BAA2B,CAAC,YAAD,CAApD;AACD,KAFD,MAEO;AACL,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,QAA2D;AAC/D,QAAA,gBAAgB,EAAE;AAD6C,OAA3D,CAAN;AAGD;AACF,GARD;;;;;;;;AAeA,EAAA,KAAA,CAAA,SAAA,CAAA,SAAA,GAAA,UAAU,OAAV,EAAyB;AACvB,WAAO,KAAK,QAAL,CAAc,OAAd,KAA0B,CAAjC;AACD,GAFD;;;;;;;;AASA,EAAA,KAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAA2B,KAA3B,EAAwC;AACtC,QAAM,WAAW,GAAG,0BAA0B,CAAC,IAAD,CAA9C;AACA,QAAM,YAAY,GAAG,2BAA2B,CAAC,KAAD,CAAhD;;AACA,QAAI,WAAW,IAAI,YAAnB,EAAiC;AAC/B,WAAK,gBAAL,CAAsB,IAAtB,IAA8B,KAA9B;AACA;AACD,KANqC,C;;;AAQtC,QAAI,CAAC,WAAL,EAAkB;AAChB,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,QAAuD;AAC3D,QAAA,aAAa,EAAE;AAD4C,OAAvD,CAAN;AAGD;;AACD,QAAI,CAAC,YAAL,EAAmB;AACjB,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,QAAwD;AAC5D,QAAA,cAAc,EAAE;AAD4C,OAAxD,CAAN;AAGD;AACF,GAlBD;;;;;;;AAwBA,EAAA,KAAA,CAAA,SAAA,CAAA,YAAA,GAAA,UAAa,IAAb,EAAyB;AACvB,WAAO,KAAK,gBAAL,CAAsB,IAAtB,CAAP;AACD,GAFD;;AAIA,EAAA,KAAA,CAAA,SAAA,CAAA,eAAA,GAAA,UAAgB,IAAhB,EAA4B;AAC1B,QAAI,KAAK,gBAAL,CAAsB,IAAtB,MAAgC,SAApC,EAA+C;AAC7C;AACD;;AACD,WAAO,KAAK,gBAAL,CAAsB,IAAtB,CAAP;AACD,GALD;;AAOA,EAAA,KAAA,CAAA,SAAA,CAAA,aAAA,GAAA,YAAA;AACE,WAAA,KAAA,CAAA,QAAA,CAAA,EAAA,EAAY,KAAK,gBAAjB,CAAA;AACD,GAFD;;AAIQ,EAAA,KAAA,CAAA,SAAA,CAAA,YAAA,GAAR,UAAqB,SAArB,EAAsC;AACpC,SAAK,WAAL,GAAmB,SAAnB;AACD,GAFO;;AAIA,EAAA,KAAA,CAAA,SAAA,CAAA,WAAA,GAAR,UAAoB,QAApB,EAAoC;AAClC,SAAK,UAAL,GAAkB,QAAlB;AACD,GAFO;;;;;;;AAQA,EAAA,KAAA,CAAA,SAAA,CAAA,qBAAA,GAAR,YAAA;AACE,QAAM,kBAAkB,GAAG,KAAK,GAAL,CAAS,gBAAT,CAA0B,KAAK,YAA/B,CAA3B;AACA,QAAM,gBAAgB,GAAG,kBAAkB,IAAI,kBAAkB,CAAC,CAAD,CAAjE;;AACA,QAAI,gBAAJ,EAAsB;AACpB,WAAK,UAAL,GAAkB,IAAI,CAAC,KAAL,CAAW,gBAAgB,CAAC,QAAjB,GAA4B,IAAvC,CAAlB;AACA,WAAK,WAAL,GAAmB,IAAI,CAAC,KAAL,CACjB,CAAC,gBAAgB,CAAC,SAAjB,GAA6B,KAAK,GAAL,CAAS,aAAT,EAA9B,IAA0D,IADzC,CAAnB;AAGD;AACF,GATO;;;;;;;;;AAiBD,EAAA,KAAA,CAAA,cAAA,GAAP,UACE,iBADF,EAEE,YAFF,EAGE,eAHF,EAG0B;AAExB,QAAM,KAAK,GAAG,GAAG,CAAC,WAAJ,GAAkB,MAAlB,EAAd;;AACA,QAAI,CAAC,KAAL,EAAY;AACV;AACD;;AACD,QAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,0BAA0B,GAAG,KAAvC,EAA8C,IAA9C,CAAd;AACA,QAAM,YAAY,GAAG,IAAI,CAAC,KAAL,CAAW,GAAG,CAAC,WAAJ,GAAkB,aAAlB,KAAoC,IAA/C,CAArB;AACA,IAAA,KAAK,CAAC,YAAN,CAAmB,YAAnB,EARwB,C;;AAWxB,QAAI,iBAAiB,IAAI,iBAAiB,CAAC,CAAD,CAA1C,EAA+C;AAC7C,MAAA,KAAK,CAAC,WAAN,CAAkB,IAAI,CAAC,KAAL,CAAW,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,QAArB,GAAgC,IAA3C,CAAlB;AACA,MAAA,KAAK,CAAC,SAAN,CACE,gBADF,EAEE,IAAI,CAAC,KAAL,CAAW,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,cAArB,GAAsC,IAAjD,CAFF;AAIA,MAAA,KAAK,CAAC,SAAN,CACE,0BADF,EAEE,IAAI,CAAC,KAAL,CAAW,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,wBAArB,GAAgD,IAA3D,CAFF;AAIA,MAAA,KAAK,CAAC,SAAN,CACE,cADF,EAEE,IAAI,CAAC,KAAL,CAAW,iBAAiB,CAAC,CAAD,CAAjB,CAAqB,YAArB,GAAoC,IAA/C,CAFF;AAID;;AAED,QAAM,WAAW,GAAG,aAApB;AACA,QAAM,sBAAsB,GAAG,wBAA/B;;AACA,QAAI,YAAJ,EAAkB;AAChB,UAAM,UAAU,GAAG,YAAY,CAAC,IAAb,CACjB,UAAA,WAAA,EAAW;AAAI,eAAA,WAAW,CAAC,IAAZ,KAAqB,WAArB;AAAgC,OAD9B,CAAnB;;AAGA,UAAI,UAAU,IAAI,UAAU,CAAC,SAA7B,EAAwC;AACtC,QAAA,KAAK,CAAC,SAAN,CACE,wBADF,EAEE,IAAI,CAAC,KAAL,CAAW,UAAU,CAAC,SAAX,GAAuB,IAAlC,CAFF;AAID;;AACD,UAAM,oBAAoB,GAAG,YAAY,CAAC,IAAb,CAC3B,UAAA,WAAA,EAAW;AAAI,eAAA,WAAW,CAAC,IAAZ,KAAqB,sBAArB;AAA2C,OAD/B,CAA7B;;AAGA,UAAI,oBAAoB,IAAI,oBAAoB,CAAC,SAAjD,EAA4D;AAC1D,QAAA,KAAK,CAAC,SAAN,CACE,mCADF,EAEE,IAAI,CAAC,KAAL,CAAW,oBAAoB,CAAC,SAArB,GAAiC,IAA5C,CAFF;AAID;;AAED,UAAI,eAAJ,EAAqB;AACnB,QAAA,KAAK,CAAC,SAAN,CACE,8BADF,EAEE,IAAI,CAAC,KAAL,CAAW,eAAe,GAAG,IAA7B,CAFF;AAID;AACF;;AAED,IAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GA7DM;;AA+DA,EAAA,KAAA,CAAA,qBAAA,GAAP,UAA6B,WAA7B,EAAgD;AAC9C,QAAM,KAAK,GAAG,IAAI,KAAJ,CAAU,WAAV,EAAuB,KAAvB,EAA8B,WAA9B,CAAd;AACA,IAAA,QAAQ,CAAC,KAAD,CAAR;AACD,GAHM;;AAIT,SAAA,KAAA;AAAC,CA3RD,EAAA;AC7CA;;;;;;;;;;;;;;;;;;SAgDgB,yB,CAA0B,K,EAAuB;AAC/D,MAAM,gBAAgB,GAAG,KAAzB;;AACA,MAAI,CAAC,gBAAD,IAAqB,gBAAgB,CAAC,aAAjB,KAAmC,SAA5D,EAAuE;AACrE;AACD;;AACD,MAAM,UAAU,GAAG,GAAG,CAAC,WAAJ,GAAkB,aAAlB,EAAnB;AACA,MAAM,WAAW,GAAG,IAAI,CAAC,KAAL,CAClB,CAAC,gBAAgB,CAAC,SAAjB,GAA6B,UAA9B,IAA4C,IAD1B,CAApB;AAGA,MAAM,yBAAyB,GAAG,gBAAgB,CAAC,aAAjB,GAC9B,IAAI,CAAC,KAAL,CACE,CAAC,gBAAgB,CAAC,aAAjB,GAAiC,gBAAgB,CAAC,SAAnD,IAAgE,IADlE,CAD8B,GAI9B,SAJJ;AAKA,MAAM,yBAAyB,GAAG,IAAI,CAAC,KAAL,CAChC,CAAC,gBAAgB,CAAC,WAAjB,GAA+B,gBAAgB,CAAC,SAAjD,IAA8D,IAD9B,CAAlC,CAd+D,C;;AAkB/D,MAAM,GAAG,GAAG,gBAAgB,CAAC,IAAjB,IAAyB,gBAAgB,CAAC,IAAjB,CAAsB,KAAtB,CAA4B,GAA5B,EAAiC,CAAjC,CAArC;AACA,MAAM,cAAc,GAAmB;AACrC,IAAA,GAAG,EAAA,GADkC;AAErC,IAAA,oBAAoB,EAAE,gBAAgB,CAAC,YAFF;AAGrC,IAAA,WAAW,EAAA,WAH0B;AAIrC,IAAA,yBAAyB,EAAA,yBAJY;AAKrC,IAAA,yBAAyB,EAAA;AALY,GAAvC;AAQA,EAAA,iBAAiB,CAAC,cAAD,CAAjB;AACF;AC5EA;;;;;;;;;;;;;;;;;;AAsBA,IAAM,gBAAgB,GAAG,IAAzB;;SAEgB,iB,GAAiB;;AAE/B,MAAI,CAAC,MAAM,EAAX,EAAe;AACb;AACD,GAJ8B,C;;;;AAO/B,EAAA,UAAU,CAAC,YAAA;AAAM,WAAA,cAAc,EAAd;AAAgB,GAAvB,EAAyB,CAAzB,CAAV;AACA,EAAA,UAAU,CAAC,YAAA;AAAM,WAAA,oBAAoB,EAApB;AAAsB,GAA7B,EAA+B,CAA/B,CAAV;AACA,EAAA,UAAU,CAAC,YAAA;AAAM,WAAA,qBAAqB,EAArB;AAAuB,GAA9B,EAAgC,CAAhC,CAAV;AACD;;AAED,SAAS,oBAAT,GAA6B;AAC3B,MAAM,GAAG,GAAG,GAAG,CAAC,WAAJ,EAAZ;AACA,MAAM,SAAS,GAAG,GAAG,CAAC,gBAAJ,CAAqB,UAArB,CAAlB;;AACA,OAAuB,IAAA,EAAA,GAAA,CAAA,EAAA,WAAA,GAAA,SAAvB,EAAuB,EAAA,GAAA,WAAA,CAAA,MAAvB,EAAuB,EAAA,EAAvB,EAAkC;AAA7B,QAAM,QAAQ,GAAA,WAAA,CAAA,EAAA,CAAd;AACH,IAAA,yBAAyB,CAAC,QAAD,CAAzB;AACD;;AACD,EAAA,GAAG,CAAC,aAAJ,CAAkB,UAAlB,EAA8B,yBAA9B;AACD;;AAED,SAAS,cAAT,GAAuB;AACrB,MAAM,GAAG,GAAG,GAAG,CAAC,WAAJ,EAAZ;AACA,MAAM,iBAAiB,GAAG,GAAG,CAAC,gBAAJ,CACxB,YADwB,CAA1B;AAGA,MAAM,YAAY,GAAG,GAAG,CAAC,gBAAJ,CAAqB,OAArB,CAArB,CALqB,C;;;AAQrB,MAAI,GAAG,CAAC,iBAAR,EAA2B;;;AAGzB,QAAI,WAAS,GAAQ,UAAU,CAAC,YAAA;AAC9B,MAAA,KAAK,CAAC,cAAN,CAAqB,iBAArB,EAAwC,YAAxC;AACA,MAAA,WAAS,GAAG,SAAZ;AACD,KAH8B,EAG5B,gBAH4B,CAA/B;AAIA,IAAA,GAAG,CAAC,iBAAJ,CAAsB,UAAC,GAAD,EAAY;AAChC,UAAI,WAAJ,EAAe;AACb,QAAA,YAAY,CAAC,WAAD,CAAZ;AACA,QAAA,KAAK,CAAC,cAAN,CAAqB,iBAArB,EAAwC,YAAxC,EAAsD,GAAtD;AACD;AACF,KALD;AAMD,GAbD,MAaO;AACL,IAAA,KAAK,CAAC,cAAN,CAAqB,iBAArB,EAAwC,YAAxC;AACD;AACF;;AAED,SAAS,qBAAT,GAA8B;AAC5B,MAAM,GAAG,GAAG,GAAG,CAAC,WAAJ,EAAZ,CAD4B,C;;AAG5B,MAAM,QAAQ,GAAG,GAAG,CAAC,gBAAJ,CAAqB,SAArB,CAAjB;;AACA,OAAsB,IAAA,EAAA,GAAA,CAAA,EAAA,UAAA,GAAA,QAAtB,EAAsB,EAAA,GAAA,UAAA,CAAA,MAAtB,EAAsB,EAAA,EAAtB,EAAgC;AAA3B,QAAM,OAAO,GAAA,UAAA,CAAA,EAAA,CAAb;AACH,IAAA,qBAAqB,CAAC,OAAD,CAArB;AACD,GAN2B,C;;;AAQ5B,EAAA,GAAG,CAAC,aAAJ,CAAkB,SAAlB,EAA6B,qBAA7B;AACD;;AAED,SAAS,qBAAT,CAA+B,OAA/B,EAAwD;AACtD,MAAM,WAAW,GAAG,OAAO,CAAC,IAA5B,CADsD,C;;AAGtD,MACE,WAAW,CAAC,SAAZ,CAAsB,CAAtB,EAAyB,oBAAoB,CAAC,MAA9C,MACA,oBAFF,EAGE;AACA;AACD;;AACD,EAAA,KAAK,CAAC,qBAAN,CAA4B,WAA5B;AACF;AC5FA;;;;;;;;;;;;;;;;;;AA0BA,IAAA,qBAAA;AAAA;AAAA,YAAA;AACE,WAAA,qBAAA,CAAqB,GAArB,EAAqC;AAAhB,SAAA,GAAA,GAAA,GAAA;;AACnB,QAAI,GAAG,CAAC,WAAJ,GAAkB,qBAAlB,EAAJ,EAA+C;AAC7CC,MAAAA,IAAAA,CAAAA,yBAAAA,GACG,IADHA,CACQ,UAAA,WAAA,EAAW;AACf,YAAI,WAAJ,EAAiB;AACf,UAAA,qBAAqB;AACrB,UAAA,wBAAwB,GAAG,IAA3B,CACE,iBADF,EAEE,iBAFF;AAID;AACF,OATHA,EAUG,KAVHA,CAUS,UAAA,KAAA,EAAK;AACV,QAAA,aAAa,CAAC,IAAd,CAAmB,4CAA0C,KAA7D;AACD,OAZHA;AAaD;AACF;;AAED,EAAA,qBAAA,CAAA,SAAA,CAAA,KAAA,GAAA,UAAM,IAAN,EAAkB;AAChB,WAAO,IAAI,KAAJ,CAAU,IAAV,CAAP;AACD,GAFD;;AAIA,EAAA,MAAA,CAAA,cAAA,CAAI,qBAAA,CAAA,SAAJ,EAAI,wBAAJ,EAA0B;SAG1B,YAAA;AACE,aAAO,eAAe,CAAC,WAAhB,GAA8B,sBAArC;AACD,KALyB;SAA1B,UAA2B,GAA3B,EAAuC;AACrC,MAAA,eAAe,CAAC,WAAhB,GAA8B,sBAA9B,GAAuD,GAAvD;AACD,KAFyB;qBAAA;;AAAA,GAA1B;AAOA,EAAA,MAAA,CAAA,cAAA,CAAI,qBAAA,CAAA,SAAJ,EAAI,uBAAJ,EAAyB;SAGzB,YAAA;AACE,aAAO,eAAe,CAAC,WAAhB,GAA8B,qBAArC;AACD,KALwB;SAAzB,UAA0B,GAA1B,EAAsC;AACpC,MAAA,eAAe,CAAC,WAAhB,GAA8B,qBAA9B,GAAsD,GAAtD;AACD,KAFwB;qBAAA;;AAAA,GAAzB;AAMF,SAAA,qBAAA;AAAC,CApCD,EAAA;AC1BA;;;;;;;;;;;;;;;;;;AA8BA,IAAM,kBAAkB,GAAG,WAA3B;;SAEgB,mB,CAAoB,Q,EAA2B;AAC7D,MAAM,aAAa,GAAG,UACpB,GADoB,EAEpB,aAFoB,EAEgB;AAEpC,QAAI,GAAG,CAAC,IAAJ,KAAa,kBAAjB,EAAqC;AACnC,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,OAAN;AACD;;AACD,QAAI,OAAO,MAAP,KAAkB,WAAtB,EAAmC;AACjC,YAAM,aAAa,CAAC,MAAd,CAAoB;AAAA;AAApB,OAAN;AACD;;AACD,IAAA,QAAQ,CAAC,MAAD,CAAR;AACA,IAAA,eAAe,CAAC,WAAhB,GAA8B,mBAA9B,GAAoD,GAApD;AACA,IAAA,eAAe,CAAC,WAAhB,GAA8B,oBAA9B,GAAqD,aAArD;AACA,WAAO,IAAI,qBAAJ,CAA0B,GAA1B,CAAP;AACD,GAdD,CAD6D,C;;;AAkB5D,EAAA,QAA+B,CAAC,QAAhC,CAAyC,iBAAzC,CACC,IAAIC,SAAAA,CAAAA,SAAJ,CACE,aADF,EAEE,UAAA,SAAA,EAAS;;;AAGP,QAAM,GAAG,GAAG,SAAS,CAAC,WAAV,CAAsB,KAAtB,EAA6B,YAA7B,EAAZ,CAHO,C;;AAKP,QAAM,aAAa,GAAG,SAAS,CAC5B,WADmB,CACP,eADO,EAEnB,YAFmB,EAAtB;AAIA,WAAO,aAAa,CAAC,GAAD,EAAM,aAAN,CAApB;AACD,GAZH,EAYG;AAAA;AAZH,GADD;AAkBD,EAAA,QAAQ,CAAC,eAAT,CAAyB,IAAzB,EAA+B,OAA/B;AACD;;AAED,mBAAmB,CAAC,QAAD,CAAnB","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (\n      !fetch ||\n      !Promise ||\n      !this.navigator ||\n      !this.navigator.cookieEnabled\n    ) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Capture a snapshot of the queue and empty the \"official queue\".\n  const staged = [...queue];\n  queue = [];\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (getIid()) {\n    setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n  }\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { setupTransportService } from '../services/transport_service';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise().then(\n              setupOobResources,\n              setupOobResources\n            );\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { FirebaseApp, FirebaseNamespace } from '@firebase/app-types';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { PerformanceController } from './src/controllers/perf';\nimport { setupApi } from './src/services/api_service';\nimport { SettingsService } from './src/services/settings_service';\nimport { ERROR_FACTORY, ErrorCode } from './src/utils/errors';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { Component, ComponentType } from '@firebase/component';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { name, version } from './package.json';\n\nconst DEFAULT_ENTRY_NAME = '[DEFAULT]';\n\nexport function registerPerformance(instance: FirebaseNamespace): void {\n  const factoryMethod = (\n    app: FirebaseApp,\n    installations: FirebaseInstallations\n  ): PerformanceController => {\n    if (app.name !== DEFAULT_ENTRY_NAME) {\n      throw ERROR_FACTORY.create(ErrorCode.FB_NOT_DEFAULT);\n    }\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    setupApi(window);\n    SettingsService.getInstance().firebaseAppInstance = app;\n    SettingsService.getInstance().installationsService = installations;\n    return new PerformanceController(app);\n  };\n\n  // Register performance with firebase-app.\n  (instance as _FirebaseNamespace).INTERNAL.registerComponent(\n    new Component(\n      'performance',\n      container => {\n        /* Dependencies */\n        // getImmediate for FirebaseApp will always succeed\n        const app = container.getProvider('app').getImmediate();\n        // The following call will always succeed because perf has `import '@firebase/installations'`\n        const installations = container\n          .getProvider('installations')\n          .getImmediate();\n\n        return factoryMethod(app, installations);\n      },\n      ComponentType.PUBLIC\n    )\n  );\n\n  instance.registerVersion(name, version);\n}\n\nregisterPerformance(firebase);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    performance?: {\n      (app?: FirebaseApp): FirebasePerformance;\n    };\n  }\n  interface FirebaseApp {\n    performance?(): FirebasePerformance;\n  }\n}\n"]},"metadata":{},"sourceType":"script"}